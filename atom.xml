<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>龙|Engineer|BIMer</title>
  
  <subtitle>轨迹</subtitle>
  <link href="https://zedmoster.github.io/atom.xml" rel="self"/>
  
  <link href="https://zedmoster.github.io/"/>
  <updated>2021-02-24T11:21:19.060Z</updated>
  <id>https://zedmoster.github.io/</id>
  
  <author>
    <name>龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十分钟入门 Pandas</title>
    <link href="https://zedmoster.github.io/2021/02/23/0.learn_pandas/Pandas%20%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://zedmoster.github.io/2021/02/23/0.learn_pandas/Pandas%20%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</id>
    <published>2021-02-23T12:00:02.000Z</published>
    <updated>2021-02-24T11:21:19.060Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/566404/1601964670763-f3cf3a01-4a9d-4851-99a0-4191acb7bf5b.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&name=1_cxfqR8NAj8HGal8CVOZ7hg.png&originHeight=201&originWidth=481&size=13931&status=done&style=none&width=481" alt="Pandas.png"></p><p><code>十分钟(删掉小时)入门 Pandas</code></p><hr><h2 id="导入-Pandas"><a href="#导入-Pandas" class="headerlink" title="导入 Pandas"></a>导入 Pandas</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><a id="more"></a><p><a href="https://www.pypandas.cn/deep/">——————–官方文档——————–</a></p><hr><h2 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h2><h3 id="创建-一维数据-对象"><a href="#创建-一维数据-对象" class="headerlink" title="创建 一维数据 对象"></a>创建 一维数据 对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">d2 = pd.Series([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># df = pd.DataFrame(&#123;&quot;A&quot;:d1, &quot;B&quot;:d2&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">3    4</span></span><br><span class="line"><span class="string">4    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">0    a</span></span><br><span class="line"><span class="string">1    b</span></span><br><span class="line"><span class="string">2    c</span></span><br><span class="line"><span class="string">3    d</span></span><br><span class="line"><span class="string">4    e</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="创建-二维数据-对象"><a href="#创建-二维数据-对象" class="headerlink" title="创建 二维数据 对象"></a>创建 二维数据 对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个6行3列的随机数据</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">3</span>),</span><br><span class="line">                  index = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)], columns = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.124665  1.354623 -0.701115</span></span><br><span class="line"><span class="string">1  0.793852 -0.378799  0.502619</span></span><br><span class="line"><span class="string">2 -0.343502 -0.153304  1.008549</span></span><br><span class="line"><span class="string">3  1.047741  0.434839 -0.461387</span></span><br><span class="line"><span class="string">4 -2.024051  0.270098  0.750414</span></span><br><span class="line"><span class="string">5  0.756700  0.265707 -0.531845</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><h3 id="查看-DataFrame-头部与尾部数据"><a href="#查看-DataFrame-头部与尾部数据" class="headerlink" title="查看 DataFrame 头部与尾部数据"></a>查看 DataFrame 头部与尾部数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">print(df)            <span class="comment"># 查看全部数据</span></span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)        <span class="comment"># 分隔</span></span><br><span class="line">print(df.head())     <span class="comment"># 查看头部数据</span></span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)        <span class="comment"># 分隔</span></span><br><span class="line">print(df.tail(<span class="number">3</span>))    <span class="comment"># 查看尾部数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.162626  0.743775 -0.043558</span></span><br><span class="line"><span class="string">1  0.284162 -0.957022  1.618578</span></span><br><span class="line"><span class="string">2  0.027395 -0.073792  1.730417</span></span><br><span class="line"><span class="string">3  0.030660  2.162612  1.087933</span></span><br><span class="line"><span class="string">4 -0.840563  0.011711 -1.582771</span></span><br><span class="line"><span class="string">5 -1.129669 -1.069730 -1.274151</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.162626  0.743775 -0.043558</span></span><br><span class="line"><span class="string">1  0.284162 -0.957022  1.618578</span></span><br><span class="line"><span class="string">2  0.027395 -0.073792  1.730417</span></span><br><span class="line"><span class="string">3  0.030660  2.162612  1.087933</span></span><br><span class="line"><span class="string">4 -0.840563  0.011711 -1.582771</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">3  0.030660  2.162612  1.087933</span></span><br><span class="line"><span class="string">4 -0.840563  0.011711 -1.582771</span></span><br><span class="line"><span class="string">5 -1.129669 -1.069730 -1.274151</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查看-索引与列名"><a href="#查看-索引与列名" class="headerlink" title="查看 索引与列名"></a>查看 索引与列名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df.index)     <span class="comment"># 查看索引</span></span><br><span class="line">print(df.columns)   <span class="comment"># 查看列名</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Int64Index([0, 1, 2, 3, 4, 5], dtype=&#x27;int64&#x27;)</span></span><br><span class="line"><span class="string">Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="快速查看数据的-统计摘要"><a href="#快速查看数据的-统计摘要" class="headerlink" title="快速查看数据的 统计摘要"></a>快速查看数据的 统计摘要</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(df.describe())   <span class="comment"># 数据的统计摘要</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">               A          B          C</span></span><br><span class="line"><span class="string">count  10.000000  10.000000  10.000000</span></span><br><span class="line"><span class="string">mean   -0.134164   0.066692  -0.623249</span></span><br><span class="line"><span class="string">std     0.972375   1.050455   0.807784</span></span><br><span class="line"><span class="string">min    -1.643474  -1.460358  -1.860893</span></span><br><span class="line"><span class="string">25%    -0.709000  -0.225956  -1.223937</span></span><br><span class="line"><span class="string">50%    -0.300770  -0.065260  -0.560801</span></span><br><span class="line"><span class="string">75%     0.403706   0.283554  -0.120445</span></span><br><span class="line"><span class="string">max     1.663865   2.175142   0.768465</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="转置数据"><a href="#转置数据" class="headerlink" title="转置数据"></a>转置数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.T)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.090855 -1.072805  0.184583</span></span><br><span class="line"><span class="string">1 -0.868626  0.318964 -0.121629</span></span><br><span class="line"><span class="string">2 -0.791555  0.260809 -0.710310</span></span><br><span class="line"><span class="string">3 -1.929772 -0.051195 -0.728330</span></span><br><span class="line"><span class="string">4  2.554131  0.498501  2.133360</span></span><br><span class="line"><span class="string">5 -0.823963 -1.090279 -0.522702</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          0         1         2         3         4         5</span></span><br><span class="line"><span class="string">A  1.090855 -0.868626 -0.791555 -1.929772  2.554131 -0.823963</span></span><br><span class="line"><span class="string">B -1.072805  0.318964  0.260809 -0.051195  0.498501 -1.090279</span></span><br><span class="line"><span class="string">C  0.184583 -0.121629 -0.710310 -0.728330  2.133360 -0.522702</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按轴排序"><a href="#按轴排序" class="headerlink" title="按轴排序"></a>按轴排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line"><span class="comment"># axis: 0 按行 1 按列  ascending: False 不改变源数据 True 改变源数据</span></span><br><span class="line">print(df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  2.155336 -0.434339 -0.090391</span></span><br><span class="line"><span class="string">1  0.890209  0.129525  1.179782</span></span><br><span class="line"><span class="string">2  1.220253  1.303012 -0.698433</span></span><br><span class="line"><span class="string">3 -0.804471  0.224135 -0.703521</span></span><br><span class="line"><span class="string">4 -1.253433 -1.146150 -0.735121</span></span><br><span class="line"><span class="string">5 -0.670339 -1.742963  1.990105</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          C         B         A</span></span><br><span class="line"><span class="string">0 -0.090391 -0.434339  2.155336</span></span><br><span class="line"><span class="string">1  1.179782  0.129525  0.890209</span></span><br><span class="line"><span class="string">2 -0.698433  1.303012  1.220253</span></span><br><span class="line"><span class="string">3 -0.703521  0.224135 -0.804471</span></span><br><span class="line"><span class="string">4 -0.735121 -1.146150 -1.253433</span></span><br><span class="line"><span class="string">5  1.990105 -1.742963 -0.670339</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按值排序"><a href="#按值排序" class="headerlink" title="按值排序"></a>按值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.sort_values(by=<span class="string">&quot;A&quot;</span>))  <span class="comment"># 按列名所对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.949729  0.405278  0.538712</span></span><br><span class="line"><span class="string">1 -0.064786  1.980200 -0.487046</span></span><br><span class="line"><span class="string">2 -0.399375  2.208867 -0.220238</span></span><br><span class="line"><span class="string">3  2.146529 -1.066433 -1.176879</span></span><br><span class="line"><span class="string">4 -0.898716 -2.105429 -0.558320</span></span><br><span class="line"><span class="string">5  2.259551  0.161280 -0.290100</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.949729  0.405278  0.538712</span></span><br><span class="line"><span class="string">4 -0.898716 -2.105429 -0.558320</span></span><br><span class="line"><span class="string">2 -0.399375  2.208867 -0.220238</span></span><br><span class="line"><span class="string">1 -0.064786  1.980200 -0.487046</span></span><br><span class="line"><span class="string">3  2.146529 -1.066433 -1.176879</span></span><br><span class="line"><span class="string">5  2.259551  0.161280 -0.290100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h2><p><strong>推荐使用</strong>：优化过的 <strong>Pandas</strong> 数据访问方法：<code>.at \ .iat \ .loc \ .iloc</code></p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>获取单列，产生 <strong>Series</strong>。与 <strong>df.A</strong> 等效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df[<span class="string">&quot;A&quot;</span>])</span><br><span class="line"><span class="comment"># print(df.A)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -3.889165  0.058995 -0.131490</span></span><br><span class="line"><span class="string">1  0.214254  0.753761 -0.406589</span></span><br><span class="line"><span class="string">2 -0.321746  0.337223  1.209453</span></span><br><span class="line"><span class="string">3 -0.096389  0.656442  1.016707</span></span><br><span class="line"><span class="string">4 -0.496134 -0.798966  0.425654</span></span><br><span class="line"><span class="string">5  0.278245 -0.705807  0.986345</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">0   -3.889165</span></span><br><span class="line"><span class="string">1    0.214254</span></span><br><span class="line"><span class="string">2   -0.321746</span></span><br><span class="line"><span class="string">3   -0.096389</span></span><br><span class="line"><span class="string">4   -0.496134</span></span><br><span class="line"><span class="string">5    0.278245</span></span><br><span class="line"><span class="string">Name: A, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用[ ] 切片行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df[<span class="number">2</span>:<span class="number">4</span>])   <span class="comment"># 第2行至第4行，左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.364004  0.148870 -0.330680</span></span><br><span class="line"><span class="string">1 -0.572930 -1.423234  1.984326</span></span><br><span class="line"><span class="string">2 -1.996496  0.120526 -2.829968</span></span><br><span class="line"><span class="string">3  0.406163  0.824016  0.957999</span></span><br><span class="line"><span class="string">4 -1.215831 -1.298448  0.947810</span></span><br><span class="line"><span class="string">5 -0.511757  1.180600  0.913132</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">2 -1.996496  0.120526 -2.829968</span></span><br><span class="line"><span class="string">3  0.406163  0.824016  0.957999</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按标签选择"><a href="#按标签选择" class="headerlink" title="按标签选择"></a>按标签选择</h3><p>用标签提取一行数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.loc[df.index[<span class="number">0</span>]])    <span class="comment"># 索引为提取行数的索引</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.339023  0.661502  0.824986</span></span><br><span class="line"><span class="string">1  0.619245  0.474774 -0.055600</span></span><br><span class="line"><span class="string">2  1.015228 -0.355425 -0.444053</span></span><br><span class="line"><span class="string">3 -0.424160 -0.761022  0.024026</span></span><br><span class="line"><span class="string">4  0.932760  0.666029 -0.203720</span></span><br><span class="line"><span class="string">5 -1.002828  0.209472 -1.442866</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">A    0.339023</span></span><br><span class="line"><span class="string">B    0.661502</span></span><br><span class="line"><span class="string">C    0.824986</span></span><br><span class="line"><span class="string">Name: 0, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用标签选择多列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.loc[:, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]])   <span class="comment"># : 提取所有的行  列名为 A B 的列</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.060654 -0.813041 -1.073970</span></span><br><span class="line"><span class="string">1 -0.851160  1.043976  0.194183</span></span><br><span class="line"><span class="string">2  0.264642 -0.331834 -0.193718</span></span><br><span class="line"><span class="string">3  0.803170  2.130145  0.244753</span></span><br><span class="line"><span class="string">4  1.028380  1.088563 -1.176200</span></span><br><span class="line"><span class="string">5  0.824463  0.115124 -0.603710</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B</span></span><br><span class="line"><span class="string">0 -0.060654 -0.813041</span></span><br><span class="line"><span class="string">1 -0.851160  1.043976</span></span><br><span class="line"><span class="string">2  0.264642 -0.331834</span></span><br><span class="line"><span class="string">3  0.803170  2.130145</span></span><br><span class="line"><span class="string">4  1.028380  1.088563</span></span><br><span class="line"><span class="string">5  0.824463  0.115124</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用标签切片，包含行与列结束点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.loc[<span class="number">2</span>:<span class="number">4</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]])   <span class="comment"># : 提取2-4行  列名为 A B 的列</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.341213  1.374567  0.896175</span></span><br><span class="line"><span class="string">1 -1.432347 -1.498885  0.897229</span></span><br><span class="line"><span class="string">2 -0.169359 -0.079813  0.778938</span></span><br><span class="line"><span class="string">3  0.393801  0.451041 -0.689613</span></span><br><span class="line"><span class="string">4 -1.103175  1.342899 -0.402991</span></span><br><span class="line"><span class="string">5  0.742279 -0.119841  1.114146</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B</span></span><br><span class="line"><span class="string">2 -0.169359 -0.079813</span></span><br><span class="line"><span class="string">3  0.393801  0.451041</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>提取标量值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.loc[<span class="number">0</span>, <span class="string">&#x27;A&#x27;</span>])   <span class="comment"># 按行列名提取值</span></span><br><span class="line"><span class="comment"># print(df.at[0, &#x27;A&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.046345  1.010179 -0.352825</span></span><br><span class="line"><span class="string">1 -0.409664  1.269217  0.393418</span></span><br><span class="line"><span class="string">2  0.059705 -1.613766  0.560100</span></span><br><span class="line"><span class="string">3 -1.070312 -1.936424  1.092546</span></span><br><span class="line"><span class="string">4  0.237776  1.716479  0.188743</span></span><br><span class="line"><span class="string">5 -0.321937  1.261209 -0.169163</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">1.04634487598175</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按位置选择"><a href="#按位置选择" class="headerlink" title="按位置选择"></a>按位置选择</h3><p>用整数位置选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[<span class="number">1</span>])    <span class="comment"># 行位置进行选择</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.872330  0.687903  0.159091</span></span><br><span class="line"><span class="string">1  0.829951 -1.186121  0.955721</span></span><br><span class="line"><span class="string">2 -0.641111  1.725069  0.439762</span></span><br><span class="line"><span class="string">3 -0.353691  1.285310 -1.207174</span></span><br><span class="line"><span class="string">4 -2.075890 -0.105968  0.072471</span></span><br><span class="line"><span class="string">5  1.347517 -0.675439  1.083256</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">A    0.829951</span></span><br><span class="line"><span class="string">B   -1.186121</span></span><br><span class="line"><span class="string">C    0.955721</span></span><br><span class="line"><span class="string">Name: 1, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>类似 NumPy / Python，用整数切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>])   <span class="comment"># 切片选择</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.326371  0.416501 -0.848363</span></span><br><span class="line"><span class="string">1 -0.112608 -0.330069 -1.758926</span></span><br><span class="line"><span class="string">2 -0.783527  1.840435 -1.879246</span></span><br><span class="line"><span class="string">3 -1.322841  0.379742  0.861523</span></span><br><span class="line"><span class="string">4 -0.650409  2.086843  0.781831</span></span><br><span class="line"><span class="string">5  2.226036 -1.644519 -0.401621</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B</span></span><br><span class="line"><span class="string">3 -1.322841  0.379742</span></span><br><span class="line"><span class="string">4 -0.650409  2.086843</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>类似 NumPy / Python，用整数列表按位置切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]])   <span class="comment"># 按位置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.097128  0.610125 -2.352895</span></span><br><span class="line"><span class="string">1  0.649887  0.805659  0.090565</span></span><br><span class="line"><span class="string">2  2.301369  0.795259 -0.413643</span></span><br><span class="line"><span class="string">3  0.492440  1.282051 -1.398503</span></span><br><span class="line"><span class="string">4 -0.470341  0.998427 -0.081993</span></span><br><span class="line"><span class="string">5 -0.959278 -0.810422 -1.229398</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         C</span></span><br><span class="line"><span class="string">1  0.649887  0.090565</span></span><br><span class="line"><span class="string">2  2.301369 -0.413643</span></span><br><span class="line"><span class="string">4 -0.470341 -0.081993</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>整行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[<span class="number">1</span>:<span class="number">3</span>, :])   <span class="comment"># 整行切片</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.153717 -0.106818 -0.172407</span></span><br><span class="line"><span class="string">1 -0.283473 -0.683112 -0.750459</span></span><br><span class="line"><span class="string">2 -1.485220  0.992581 -0.021852</span></span><br><span class="line"><span class="string">3  0.245505 -1.018984  0.165750</span></span><br><span class="line"><span class="string">4  0.777344 -0.746399  0.870930</span></span><br><span class="line"><span class="string">5 -0.984809  2.206306  0.940896</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">1 -0.283473 -0.683112 -0.750459</span></span><br><span class="line"><span class="string">2 -1.485220  0.992581 -0.021852</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>整列切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[:, <span class="number">1</span>:<span class="number">3</span>])   <span class="comment"># 整列切片</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -1.993272  1.161443  0.352810</span></span><br><span class="line"><span class="string">1 -0.377859 -1.122316 -0.952971</span></span><br><span class="line"><span class="string">2  0.392742  0.366656 -1.719720</span></span><br><span class="line"><span class="string">3 -1.132892  1.721778  1.413876</span></span><br><span class="line"><span class="string">4  0.846929 -0.397196  0.722770</span></span><br><span class="line"><span class="string">5 -1.910569  0.215684  1.384120</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          B         C</span></span><br><span class="line"><span class="string">0  1.161443  0.352810</span></span><br><span class="line"><span class="string">1 -1.122316 -0.952971</span></span><br><span class="line"><span class="string">2  0.366656 -1.719720</span></span><br><span class="line"><span class="string">3  1.721778  1.413876</span></span><br><span class="line"><span class="string">4 -0.397196  0.722770</span></span><br><span class="line"><span class="string">5  0.215684  1.384120</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>提取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.iloc[<span class="number">1</span>, <span class="number">1</span>])   <span class="comment"># 提取指定行列位置单元格的值</span></span><br><span class="line"><span class="comment"># print(df.iat[1,1])</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.075752  0.842907 -2.969243</span></span><br><span class="line"><span class="string">1 -0.253084  0.069218  1.421668</span></span><br><span class="line"><span class="string">2  0.671382  0.187895 -0.062780</span></span><br><span class="line"><span class="string">3 -0.544736 -2.225326 -1.944038</span></span><br><span class="line"><span class="string">4 -0.542584 -0.391144  0.145839</span></span><br><span class="line"><span class="string">5  0.615728 -0.719422 -0.087461</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">0.06921757818689403</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h3><p>用单列的值选择数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df[df.A &gt; <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.225120  0.312929  1.179228</span></span><br><span class="line"><span class="string">1 -0.357687  1.709017  1.623291</span></span><br><span class="line"><span class="string">2  0.278348 -1.132671  1.207691</span></span><br><span class="line"><span class="string">3 -2.523049  0.227406 -0.360994</span></span><br><span class="line"><span class="string">4 -0.157327 -0.292324 -0.197861</span></span><br><span class="line"><span class="string">5 -0.708942  1.225583  0.281490</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.225120  0.312929  1.179228</span></span><br><span class="line"><span class="string">2  0.278348 -1.132671  1.207691</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>选择 DataFrame 里满足条件的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df[df &gt; <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.456279 -1.338378 -0.116922</span></span><br><span class="line"><span class="string">1 -1.835649  1.514987 -0.862178</span></span><br><span class="line"><span class="string">2  0.515765  1.064303  0.717328</span></span><br><span class="line"><span class="string">3  1.485883  1.320943  0.977202</span></span><br><span class="line"><span class="string">4  1.033369 -0.980634 -1.702996</span></span><br><span class="line"><span class="string">5  0.385172  0.056046  0.784007</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.456279       NaN       NaN</span></span><br><span class="line"><span class="string">1       NaN  1.514987       NaN</span></span><br><span class="line"><span class="string">2  0.515765  1.064303  0.717328</span></span><br><span class="line"><span class="string">3  1.485883  1.320943  0.977202</span></span><br><span class="line"><span class="string">4  1.033369       NaN       NaN</span></span><br><span class="line"><span class="string">5  0.385172  0.056046  0.784007</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用  <strong>isin()</strong> 筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加辅助列</span></span><br><span class="line">df[<span class="string">&#x27;D&#x27;</span>] = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df[df[<span class="string">&#x27;D&#x27;</span>].isin([<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C      D</span></span><br><span class="line"><span class="string">0 -0.282657 -1.393703  0.875241    one</span></span><br><span class="line"><span class="string">1 -0.276764 -1.399960 -0.028655    one</span></span><br><span class="line"><span class="string">2  1.611027  1.376589  0.043859    two</span></span><br><span class="line"><span class="string">3 -0.360664 -0.490467  0.489825  three</span></span><br><span class="line"><span class="string">4  0.218109  1.323599 -0.541452   four</span></span><br><span class="line"><span class="string">5  0.307106  0.358602 -0.751541  three</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C     D</span></span><br><span class="line"><span class="string">2  1.611027  1.376589  0.043859   two</span></span><br><span class="line"><span class="string">4  0.218109  1.323599 -0.541452  four</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>用索引自动对齐新增列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增列的数据</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line"><span class="comment"># s = pd.Series([1, 2, 3, 4], index= [i for i in range(4)])</span></span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.541004 -0.621590  0.542895</span></span><br><span class="line"><span class="string">1  0.685524  1.112586 -0.224701</span></span><br><span class="line"><span class="string">2 -0.531432  1.739056 -1.160524</span></span><br><span class="line"><span class="string">3  0.220122 -0.507556  0.289801</span></span><br><span class="line"><span class="string">4  0.791843 -0.278992 -1.662583</span></span><br><span class="line"><span class="string">5  0.494893 -1.428766 -1.913229</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C  D</span></span><br><span class="line"><span class="string">0  1.541004 -0.621590  0.542895  1</span></span><br><span class="line"><span class="string">1  0.685524  1.112586 -0.224701  2</span></span><br><span class="line"><span class="string">2 -0.531432  1.739056 -1.160524  3</span></span><br><span class="line"><span class="string">3  0.220122 -0.507556  0.289801  4</span></span><br><span class="line"><span class="string">4  0.791843 -0.278992 -1.662583  5</span></span><br><span class="line"><span class="string">5  0.494893 -1.428766 -1.913229  6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>按标签赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">df.at[df.index[<span class="number">0</span>], <span class="string">&quot;A&quot;</span>] = <span class="number">0</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.896498 -1.134660 -1.701185</span></span><br><span class="line"><span class="string">1 -0.495562 -0.039068 -0.136614</span></span><br><span class="line"><span class="string">2  0.156827  0.028074  0.051109</span></span><br><span class="line"><span class="string">3  1.300580 -0.404301  0.557794</span></span><br><span class="line"><span class="string">4  0.648387 -0.110362  0.682723</span></span><br><span class="line"><span class="string">5  0.627710  1.071018 -0.375658</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.000000 -1.134660 -1.701185</span></span><br><span class="line"><span class="string">1 -0.495562 -0.039068 -0.136614</span></span><br><span class="line"><span class="string">2  0.156827  0.028074  0.051109</span></span><br><span class="line"><span class="string">3  1.300580 -0.404301  0.557794</span></span><br><span class="line"><span class="string">4  0.648387 -0.110362  0.682723</span></span><br><span class="line"><span class="string">5  0.627710  1.071018 -0.375658</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>按位置赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">df.iat[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.229924 -1.556863  1.382965</span></span><br><span class="line"><span class="string">1  1.078071 -1.616441 -0.906143</span></span><br><span class="line"><span class="string">2 -0.998971  0.095389  0.307799</span></span><br><span class="line"><span class="string">3 -1.363223  1.481546 -0.640917</span></span><br><span class="line"><span class="string">4  0.797193 -1.737114  0.529679</span></span><br><span class="line"><span class="string">5  0.293870  0.813873 -1.296403</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.000000 -1.556863  1.382965</span></span><br><span class="line"><span class="string">1  1.078071 -1.616441 -0.906143</span></span><br><span class="line"><span class="string">2 -0.998971  0.095389  0.307799</span></span><br><span class="line"><span class="string">3 -1.363223  1.481546 -0.640917</span></span><br><span class="line"><span class="string">4  0.797193 -1.737114  0.529679</span></span><br><span class="line"><span class="string">5  0.293870  0.813873 -1.296403</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用  <strong>where</strong> 条件赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">df[df &lt; <span class="number">0</span>] = -df</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.283596  0.338517 -0.051221</span></span><br><span class="line"><span class="string">1  1.504277 -0.642568 -2.094442</span></span><br><span class="line"><span class="string">2 -1.054536  0.605670  0.345182</span></span><br><span class="line"><span class="string">3 -0.316435 -0.360860 -0.623269</span></span><br><span class="line"><span class="string">4  0.893348 -0.417538 -1.249896</span></span><br><span class="line"><span class="string">5  1.234152  0.341326  1.208369</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  0.283596  0.338517  0.051221</span></span><br><span class="line"><span class="string">1  1.504277  0.642568  2.094442</span></span><br><span class="line"><span class="string">2  1.054536  0.605670  0.345182</span></span><br><span class="line"><span class="string">3  0.316435  0.360860  0.623269</span></span><br><span class="line"><span class="string">4  0.893348  0.417538  1.249896</span></span><br><span class="line"><span class="string">5  1.234152  0.341326  1.208369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h2><p>Pandas 主要用  <strong>np.nan</strong>  表示缺失数据。</p><h3 id="删除所有含缺失值的行"><a href="#删除所有含缺失值的行" class="headerlink" title="删除所有含缺失值的行"></a>删除所有含缺失值的行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.dropna(how=<span class="string">&#x27;any&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0 -0.543853  1.078289  1.605213  NaN</span></span><br><span class="line"><span class="string">1  0.153537 -0.710202  0.759139  1.0</span></span><br><span class="line"><span class="string">2 -1.274189 -1.197363 -0.827345  2.0</span></span><br><span class="line"><span class="string">3 -0.842268 -0.461013 -0.506485  3.0</span></span><br><span class="line"><span class="string">4  1.244591  0.628373  0.222035  NaN</span></span><br><span class="line"><span class="string">5 -1.022085  2.114092 -1.020721  NaN</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">1  0.153537 -0.710202  0.759139  1.0</span></span><br><span class="line"><span class="string">2 -1.274189 -1.197363 -0.827345  2.0</span></span><br><span class="line"><span class="string">3 -0.842268 -0.461013 -0.506485  3.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="填充缺失值"><a href="#填充缺失值" class="headerlink" title="填充缺失值"></a>填充缺失值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.fillna(value=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0  0.320348 -0.155423 -1.706578  NaN</span></span><br><span class="line"><span class="string">1 -1.117155 -1.388033 -0.112940  1.0</span></span><br><span class="line"><span class="string">2  1.472523 -1.621894  0.281751  2.0</span></span><br><span class="line"><span class="string">3 -1.273164 -0.487470 -0.156216  3.0</span></span><br><span class="line"><span class="string">4  0.323109  1.527510  0.648772  NaN</span></span><br><span class="line"><span class="string">5 -0.297837 -2.281177  1.050784  NaN</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0  0.320348 -0.155423 -1.706578  0.0</span></span><br><span class="line"><span class="string">1 -1.117155 -1.388033 -0.112940  1.0</span></span><br><span class="line"><span class="string">2  1.472523 -1.621894  0.281751  2.0</span></span><br><span class="line"><span class="string">3 -1.273164 -0.487470 -0.156216  3.0</span></span><br><span class="line"><span class="string">4  0.323109  1.527510  0.648772  0.0</span></span><br><span class="line"><span class="string">5 -0.297837 -2.281177  1.050784  0.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="提取-NaN-值的布尔掩码"><a href="#提取-NaN-值的布尔掩码" class="headerlink" title="提取  NaN 值的布尔掩码"></a>提取  NaN 值的布尔掩码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.isna())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0  0.462171 -0.212011  1.621004  NaN</span></span><br><span class="line"><span class="string">1 -2.031842  1.020010 -0.346799  1.0</span></span><br><span class="line"><span class="string">2  0.772598 -1.037917  0.252420  2.0</span></span><br><span class="line"><span class="string">3 -0.995666 -0.464408 -0.319256  3.0</span></span><br><span class="line"><span class="string">4 -1.564766  0.503919 -0.021231  NaN</span></span><br><span class="line"><span class="string">5  0.598078 -0.400159 -0.112247  NaN</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">       A      B      C      D</span></span><br><span class="line"><span class="string">0  False  False  False   True</span></span><br><span class="line"><span class="string">1  False  False  False  False</span></span><br><span class="line"><span class="string">2  False  False  False  False</span></span><br><span class="line"><span class="string">3  False  False  False  False</span></span><br><span class="line"><span class="string">4  False  False  False   True</span></span><br><span class="line"><span class="string">5  False  False  False   True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>一般情况下，运算时<strong>排除</strong>缺失值。<br><strong>描述性统计</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.mean())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0 -1.703692 -0.575941  0.628585  NaN</span></span><br><span class="line"><span class="string">1  0.916258  0.854553  0.380848  1.0</span></span><br><span class="line"><span class="string">2  0.492740 -0.523946  1.288998  2.0</span></span><br><span class="line"><span class="string">3  0.533275 -0.607054 -2.210509  3.0</span></span><br><span class="line"><span class="string">4 -1.286734  1.610702  0.775895  NaN</span></span><br><span class="line"><span class="string">5  1.206607 -1.991650  2.387589  NaN</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">A    0.026409</span></span><br><span class="line"><span class="string">B   -0.205556</span></span><br><span class="line"><span class="string">C    0.541901</span></span><br><span class="line"><span class="string">D    2.000000</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在另一个轴(即，行)上执行同样的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index= [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.mean(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0  0.128729 -0.642457 -1.474499  NaN</span></span><br><span class="line"><span class="string">1  0.021186 -0.041340 -2.857500  1.0</span></span><br><span class="line"><span class="string">2  0.400155  2.757253 -1.097531  2.0</span></span><br><span class="line"><span class="string">3 -0.753501  1.087295 -0.069450  3.0</span></span><br><span class="line"><span class="string">4  0.159137  0.214257  0.319562  NaN</span></span><br><span class="line"><span class="string">5  1.489170 -0.616156  1.099160  NaN</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">0   -0.662743</span></span><br><span class="line"><span class="string">1   -0.469413</span></span><br><span class="line"><span class="string">2    1.014969</span></span><br><span class="line"><span class="string">3    0.816086</span></span><br><span class="line"><span class="string">4    0.230985</span></span><br><span class="line"><span class="string">5    0.657392</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>不同维度对象运算时，要先对齐。 此外，Pandas 自动沿指定维度偏移（空填充 NaN）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line">s2 = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]).shift(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(s1)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    1.0</span></span><br><span class="line"><span class="string">1    3.0</span></span><br><span class="line"><span class="string">2    5.0</span></span><br><span class="line"><span class="string">3    NaN</span></span><br><span class="line"><span class="string">4    6.0</span></span><br><span class="line"><span class="string">5    8.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">0    NaN</span></span><br><span class="line"><span class="string">1    NaN</span></span><br><span class="line"><span class="string">2    1.0</span></span><br><span class="line"><span class="string">3    3.0</span></span><br><span class="line"><span class="string">4    5.0</span></span><br><span class="line"><span class="string">5    NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对不同维度的 pandas 对象按 index 进行减法操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]).shift(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.sub(s, axis=<span class="string">&#x27;index&#x27;</span>))   <span class="comment"># 对不同维度的 pandas 对象进行减法操作</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0 -0.584577  1.600920  0.086218</span></span><br><span class="line"><span class="string">1  0.618951  1.851896 -0.424703</span></span><br><span class="line"><span class="string">2 -1.275505  0.841881  0.922940</span></span><br><span class="line"><span class="string">3 -0.190054 -0.358825 -0.540433</span></span><br><span class="line"><span class="string">4 -1.572596 -0.472747  2.342729</span></span><br><span class="line"><span class="string">5  0.328756 -0.890938 -0.099436</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0       NaN       NaN       NaN</span></span><br><span class="line"><span class="string">1       NaN       NaN       NaN</span></span><br><span class="line"><span class="string">2 -2.275505 -0.158119 -0.077060</span></span><br><span class="line"><span class="string">3 -3.190054 -3.358825 -3.540433</span></span><br><span class="line"><span class="string">4 -6.572596 -5.472747 -2.657271</span></span><br><span class="line"><span class="string">5       NaN       NaN       NaN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Apply-函数"><a href="#Apply-函数" class="headerlink" title="Apply 函数"></a>Apply 函数</h3><p><strong>np.cumsum()</strong> 计算轴向元素累加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, np.nan, <span class="number">9</span>], index=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.apply(np.cumsum))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0 -2.061076  0.933043  0.593438  1.0</span></span><br><span class="line"><span class="string">1  0.521699  0.100992  0.803118  3.0</span></span><br><span class="line"><span class="string">2 -0.648522  1.948277  0.424076  5.0</span></span><br><span class="line"><span class="string">3  0.353591  0.956902  0.725868  7.0</span></span><br><span class="line"><span class="string">4  0.015446  2.114823 -0.113994  NaN</span></span><br><span class="line"><span class="string">5  0.187891 -0.402199 -0.408387  9.0</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C     D</span></span><br><span class="line"><span class="string">0 -2.061076  0.933043  0.593438   1.0</span></span><br><span class="line"><span class="string">1 -1.539376  1.034036  1.396556   4.0</span></span><br><span class="line"><span class="string">2 -2.187898  2.982312  1.820633   9.0</span></span><br><span class="line"><span class="string">3 -1.834308  3.939215  2.546501  16.0</span></span><br><span class="line"><span class="string">4 -1.818861  6.054038  2.432507   NaN</span></span><br><span class="line"><span class="string">5 -1.630970  5.651839  2.024119  25.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>lambda</strong> 计算列最大值与最小值差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, np.nan, <span class="number">9</span>], index=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line">df[<span class="string">&quot;D&quot;</span>] = s</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>()))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C    D</span></span><br><span class="line"><span class="string">0 -0.458813  0.887916 -1.148145  1.0</span></span><br><span class="line"><span class="string">1 -0.641170 -0.508265  1.569428  3.0</span></span><br><span class="line"><span class="string">2  2.144850 -0.914715  1.502805  5.0</span></span><br><span class="line"><span class="string">3 -2.162331  0.916027 -0.552572  7.0</span></span><br><span class="line"><span class="string">4 -0.715221  0.741209  1.283300  NaN</span></span><br><span class="line"><span class="string">5 -0.952700  0.759135  0.839457  9.0</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">A    4.307181</span></span><br><span class="line"><span class="string">B    1.830742</span></span><br><span class="line"><span class="string">C    2.717572</span></span><br><span class="line"><span class="string">D    8.000000</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p><strong>Series</strong> 的  <strong>str</strong>  属性包含一组字符串处理功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Aaba&#x27;</span>, <span class="string">&#x27;Baca&#x27;</span>, np.nan, <span class="string">&#x27;CABA&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>])</span><br><span class="line"><span class="comment"># print(s.str.upper())</span></span><br><span class="line">print(s.<span class="built_in">str</span>.lower())   <span class="comment"># 字符串转小写</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0       a</span></span><br><span class="line"><span class="string">1       b</span></span><br><span class="line"><span class="string">2       c</span></span><br><span class="line"><span class="string">3    aaba</span></span><br><span class="line"><span class="string">4    baca</span></span><br><span class="line"><span class="string">5     NaN</span></span><br><span class="line"><span class="string">6    caba</span></span><br><span class="line"><span class="string">7     dog</span></span><br><span class="line"><span class="string">8     cat</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="合并（Merge）"><a href="#合并（Merge）" class="headerlink" title="合并（Merge）"></a>合并（Merge）</h2><h3 id="结合（Concat）"><a href="#结合（Concat）" class="headerlink" title="结合（Concat）"></a>结合（Concat）</h3><p><strong>Pandas</strong> 提供了多种将 <strong>Series</strong>、 <strong>DataFrame</strong> 对象组合在一起的功能，用索引与关联代数功能的多种设置逻辑可执行连接 <code>join</code> 与合并 <code>merge</code> 操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">                  index = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)], columns = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割为多组</span></span><br><span class="line">pie = [df[:<span class="number">3</span>],df[<span class="number">7</span>:]]</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(pd.concat(pie))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.165033 -0.384343  2.195076</span></span><br><span class="line"><span class="string">1  1.103231  0.897121 -1.539638</span></span><br><span class="line"><span class="string">2 -0.740862 -1.330342  0.758274</span></span><br><span class="line"><span class="string">3 -0.989859 -0.129917 -1.821686</span></span><br><span class="line"><span class="string">4  0.248147 -0.009504 -0.240990</span></span><br><span class="line"><span class="string">5  0.465128  0.874807  0.397816</span></span><br><span class="line"><span class="string">6  2.649065  2.967698  2.902726</span></span><br><span class="line"><span class="string">7  0.902977  2.218083 -0.231896</span></span><br><span class="line"><span class="string">8 -1.029878  0.252509 -0.499249</span></span><br><span class="line"><span class="string">9  0.299016  0.748987 -2.134939</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C</span></span><br><span class="line"><span class="string">0  1.165033 -0.384343  2.195076</span></span><br><span class="line"><span class="string">1  1.103231  0.897121 -1.539638</span></span><br><span class="line"><span class="string">2 -0.740862 -1.330342  0.758274</span></span><br><span class="line"><span class="string">7  0.902977  2.218083 -0.231896</span></span><br><span class="line"><span class="string">8 -1.029878  0.252509 -0.499249</span></span><br><span class="line"><span class="string">9  0.299016  0.748987 -2.134939</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="连接（join）"><a href="#连接（join）" class="headerlink" title="连接（join）"></a>连接（join）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># left = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;leftVal&#x27;: [1, 2]&#125;)</span></span><br><span class="line"><span class="comment"># right = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;foo&#x27;, &#x27;foo&#x27;], &#x27;rightVal&#x27;: [4, 5]&#125;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># df = pd.merge(left, right, on=&#x27;key&#x27;)  # key 相同 计算方式：叉积</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(left)</span></span><br><span class="line"><span class="comment"># print(right)</span></span><br><span class="line"><span class="comment"># print(&quot;=&quot;*30)</span></span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], <span class="string">&#x27;lval&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], <span class="string">&#x27;rval&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df = pd.merge(left, right, on=<span class="string">&#x27;key&#x27;</span>)  <span class="comment"># key 不相同 计算方式：交集</span></span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   key  lval</span></span><br><span class="line"><span class="string">0  foo     1</span></span><br><span class="line"><span class="string">1  bar     2</span></span><br><span class="line"><span class="string">   key  rval</span></span><br><span class="line"><span class="string">0  foo     4</span></span><br><span class="line"><span class="string">1  bar     5</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">   key  lval  rval</span></span><br><span class="line"><span class="string">0  foo     1     4</span></span><br><span class="line"><span class="string">1  bar     2     5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="追加（Append）"><a href="#追加（Append）" class="headerlink" title="追加（Append）"></a>追加（Append）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">3</span>, <span class="number">4</span>), columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line">s = df.iloc[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.append(s, ignore_index=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          A         B         C         D</span></span><br><span class="line"><span class="string">0  0.611300 -0.800572 -0.353525 -1.236768</span></span><br><span class="line"><span class="string">1  1.525472  0.664762 -0.801413 -0.047937</span></span><br><span class="line"><span class="string">2 -1.012871  1.016602 -1.807150 -0.570177</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">          A         B         C         D</span></span><br><span class="line"><span class="string">0  0.611300 -0.800572 -0.353525 -1.236768</span></span><br><span class="line"><span class="string">1  1.525472  0.664762 -0.801413 -0.047937</span></span><br><span class="line"><span class="string">2 -1.012871  1.016602 -1.807150 -0.570177</span></span><br><span class="line"><span class="string">3 -1.012871  1.016602 -1.807150 -0.570177</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="分组（Grouping）"><a href="#分组（Grouping）" class="headerlink" title="分组（Grouping）"></a>分组（Grouping）</h2><p><strong>groupby</strong> 指的是涵盖下列一项或多项步骤的处理流程：</p><ul><li><strong>分割</strong>：按条件把数据分割成多组；</li><li><strong>应用</strong>：为每组单独应用函数；</li><li><strong>组合</strong>：将处理结果组合成一个数据结构。</li></ul><p>先分组，再用 <strong>sum()</strong> 函数计算每组的汇总数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: np.random.randn(<span class="number">7</span>),</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">7</span>) &#125;)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.groupby(<span class="string">&#x27;A&#x27;</span>).<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     A      B         C         D</span></span><br><span class="line"><span class="string">0  foo    one  1.308640 -0.023831</span></span><br><span class="line"><span class="string">1  bar    one -1.076809 -0.489503</span></span><br><span class="line"><span class="string">2  foo    two -0.905921  1.384916</span></span><br><span class="line"><span class="string">3  bar  three -1.241199 -0.006680</span></span><br><span class="line"><span class="string">4  foo    two  1.874379 -1.549396</span></span><br><span class="line"><span class="string">5  bar    two -0.277820 -0.636638</span></span><br><span class="line"><span class="string">6  foo  three  1.214788  0.946836</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">            C         D</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">bar -2.595828 -1.132822</span></span><br><span class="line"><span class="string">foo  3.491886  0.758525</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>多列分组后，生成多层索引，也可以应用  <strong>sum()</strong> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: np.random.randn(<span class="number">7</span>),</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">7</span>) &#125;)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(df.groupby([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]).<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     A      B         C         D</span></span><br><span class="line"><span class="string">0  foo    one -0.042610  0.422804</span></span><br><span class="line"><span class="string">1  bar    one -0.784786  2.476076</span></span><br><span class="line"><span class="string">2  foo    two  0.131051  0.137128</span></span><br><span class="line"><span class="string">3  bar  three -0.859655 -0.854677</span></span><br><span class="line"><span class="string">4  foo    two  0.032752 -0.437160</span></span><br><span class="line"><span class="string">5  bar    two  0.150680  0.607142</span></span><br><span class="line"><span class="string">6  foo  three  1.276175  1.193811</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">                  C         D</span></span><br><span class="line"><span class="string">A   B</span></span><br><span class="line"><span class="string">bar one   -0.784786  2.476076</span></span><br><span class="line"><span class="string">    three -0.859655 -0.854677</span></span><br><span class="line"><span class="string">    two    0.150680  0.607142</span></span><br><span class="line"><span class="string">foo one   -0.042610  0.422804</span></span><br><span class="line"><span class="string">    three  1.276175  1.193811</span></span><br><span class="line"><span class="string">    two    0.163803 -0.300032</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="重塑（Reshaping）"><a href="#重塑（Reshaping）" class="headerlink" title="重塑（Reshaping）"></a>重塑（Reshaping）</h2><h3 id="堆叠（Stack）"><a href="#堆叠（Stack）" class="headerlink" title="堆叠（Stack）"></a>堆叠（Stack）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">tuples = <span class="built_in">list</span>(<span class="built_in">zip</span>(*[</span><br><span class="line">    [<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>] ]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置堆叠</span></span><br><span class="line">index = pd.MultiIndex.from_tuples(tuples, names=[<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                     A         B</span></span><br><span class="line"><span class="string">first second</span></span><br><span class="line"><span class="string">bar   one    -1.336275 -0.030989</span></span><br><span class="line"><span class="string">      two     0.368196  0.130646</span></span><br><span class="line"><span class="string">baz   one    -0.812696 -0.482284</span></span><br><span class="line"><span class="string">      two     0.964527 -0.868157</span></span><br><span class="line"><span class="string">foo   one     0.515658 -0.894977</span></span><br><span class="line"><span class="string">      two    -0.576530 -0.778433</span></span><br><span class="line"><span class="string">qux   one    -1.153507  1.761371</span></span><br><span class="line"><span class="string">      two    -0.954842 -0.315546</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>压缩后的 <strong>DataFrame</strong> 或 <strong>Series</strong> 具有多层索引， <strong>stack()</strong>  的逆操作是  **unstack()**，默认为拆叠最后一层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">tuples = <span class="built_in">list</span>(<span class="built_in">zip</span>(*[</span><br><span class="line">    [<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>] ]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置堆叠</span></span><br><span class="line">index = pd.MultiIndex.from_tuples(tuples, names=[<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">stacked = df.stack()</span><br><span class="line">print(stacked)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(stacked.unstack())</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(stacked.unstack(<span class="number">1</span>))</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">print(stacked.unstack(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">first  second</span></span><br><span class="line"><span class="string">bar    one     A    1.045996</span></span><br><span class="line"><span class="string">               B    0.605382</span></span><br><span class="line"><span class="string">       two     A   -1.885341</span></span><br><span class="line"><span class="string">               B    0.515791</span></span><br><span class="line"><span class="string">baz    one     A    0.282474</span></span><br><span class="line"><span class="string">               B    0.063214</span></span><br><span class="line"><span class="string">       two     A   -2.581561</span></span><br><span class="line"><span class="string">               B   -0.479922</span></span><br><span class="line"><span class="string">foo    one     A   -0.343941</span></span><br><span class="line"><span class="string">               B    0.450805</span></span><br><span class="line"><span class="string">       two     A   -1.067748</span></span><br><span class="line"><span class="string">               B    1.004922</span></span><br><span class="line"><span class="string">qux    one     A   -1.413637</span></span><br><span class="line"><span class="string">               B    2.494043</span></span><br><span class="line"><span class="string">       two     A   -0.305369</span></span><br><span class="line"><span class="string">               B   -0.317468</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">                     A         B</span></span><br><span class="line"><span class="string">first second</span></span><br><span class="line"><span class="string">bar   one     1.045996  0.605382</span></span><br><span class="line"><span class="string">      two    -1.885341  0.515791</span></span><br><span class="line"><span class="string">baz   one     0.282474  0.063214</span></span><br><span class="line"><span class="string">      two    -2.581561 -0.479922</span></span><br><span class="line"><span class="string">foo   one    -0.343941  0.450805</span></span><br><span class="line"><span class="string">      two    -1.067748  1.004922</span></span><br><span class="line"><span class="string">qux   one    -1.413637  2.494043</span></span><br><span class="line"><span class="string">      two    -0.305369 -0.317468</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">second        one       two</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">bar   A  1.045996 -1.885341</span></span><br><span class="line"><span class="string">      B  0.605382  0.515791</span></span><br><span class="line"><span class="string">baz   A  0.282474 -2.581561</span></span><br><span class="line"><span class="string">      B  0.063214 -0.479922</span></span><br><span class="line"><span class="string">foo   A -0.343941 -1.067748</span></span><br><span class="line"><span class="string">      B  0.450805  1.004922</span></span><br><span class="line"><span class="string">qux   A -1.413637 -0.305369</span></span><br><span class="line"><span class="string">      B  2.494043 -0.317468</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">first          bar       baz       foo       qux</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">one    A  1.045996  0.282474 -0.343941 -1.413637</span></span><br><span class="line"><span class="string">       B  0.605382  0.063214  0.450805  2.494043</span></span><br><span class="line"><span class="string">two    A -1.885341 -2.581561 -1.067748 -0.305369</span></span><br><span class="line"><span class="string">       B  0.515791 -0.479922  1.004922 -0.317468</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="数据透视表（Pivot-Tables）"><a href="#数据透视表（Pivot-Tables）" class="headerlink" title="数据透视表（Pivot Tables）"></a>数据透视表（Pivot Tables）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>] * <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] * <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">12</span>) &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">pt = pd.pivot_table(df, values=<span class="string">&#x27;D&#x27;</span>, index=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], columns=[<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">print(pt)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/566404/1584070444869-5aaa78f4-bdc6-49c6-87c0-1e7d1b3d8411.jpeg#align=left&display=inline&height=855&margin=%5Bobject%20Object%5D&name=pivot_table.jpg&originHeight=855&originWidth=648&size=100775&status=done&style=shadow&width=648" alt="pivot_table.jpg"></p><hr><h2 id="类别型（Categoricals）"><a href="#类别型（Categoricals）" class="headerlink" title="类别型（Categoricals）"></a>类别型（Categoricals）</h2><p>Pandas 的 DataFrame 里可以包含类别数据。</p><p>将  <strong>grade</strong> 的原生数据转换为类别型数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">&quot;raw_grade&quot;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">df[<span class="string">&quot;grade&quot;</span>] = df[<span class="string">&quot;raw_grade&quot;</span>].astype(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">print(df[<span class="string">&quot;grade&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   id raw_grade</span></span><br><span class="line"><span class="string">0   1         a</span></span><br><span class="line"><span class="string">1   2         b</span></span><br><span class="line"><span class="string">2   3         b</span></span><br><span class="line"><span class="string">3   4         a</span></span><br><span class="line"><span class="string">4   5         a</span></span><br><span class="line"><span class="string">5   6         e</span></span><br><span class="line"><span class="string">==============================</span></span><br><span class="line"><span class="string">0    a</span></span><br><span class="line"><span class="string">1    b</span></span><br><span class="line"><span class="string">2    b</span></span><br><span class="line"><span class="string">3    a</span></span><br><span class="line"><span class="string">4    a</span></span><br><span class="line"><span class="string">5    e</span></span><br><span class="line"><span class="string">Name: grade, dtype: category</span></span><br><span class="line"><span class="string">Categories (3, object): [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">ts = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">&#x27;1/1/2020&#x27;</span>, periods=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">ts = ts.cumsum()</span><br><span class="line">ts.plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/566404/1601964062861-5ba324df-94e1-4d28-94ae-4aa1a6f97f05.png#align=left&display=inline&height=1321&margin=%5Bobject%20Object%5D&name=Figure_1.png&originHeight=1321&originWidth=2560&size=122746&status=done&style=shadow&width=2560" alt="Figure_1.png"></p><p>DataFrame 的 <strong>plot()</strong> 方法可以快速绘制所有带标签的列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time      : 2020-10-05</span></span><br><span class="line"><span class="comment"># @Author    : xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">ts = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">&#x27;1/1/2020&#x27;</span>, periods=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df = df.cumsum()</span><br><span class="line">plt.figure()</span><br><span class="line">df.plot()</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/566404/1601964244039-819a76b0-9c55-414b-990a-1ad9b8118dbb.png#align=left&display=inline&height=1321&margin=%5Bobject%20Object%5D&name=Figure_2.png&originHeight=1321&originWidth=2560&size=329255&status=done&style=shadow&width=2560" alt="Figure_2.png"></p><hr><h2 id="数据输入-输出"><a href="#数据输入-输出" class="headerlink" title="数据输入 / 输出"></a>数据输入 / 输出</h2><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>写入 CSV 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&#x27;output.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取 CSV 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">&#x27;input.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>写入 Excel 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(<span class="string">&#x27;output.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取 Excel 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel(<span class="string">&#x27;input.xlsx&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>, index_col=<span class="literal">None</span>, na_values=[<span class="string">&#x27;NA&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Pandas 基本使用</summary>
    
    
    
    <category term="python" scheme="https://zedmoster.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
    <category term="pandas" scheme="https://zedmoster.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg 操作手册</title>
    <link href="https://zedmoster.github.io/2021/02/23/0.learn_FFmpeg/ffmpeg%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://zedmoster.github.io/2021/02/23/0.learn_FFmpeg/ffmpeg%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2021-02-23T12:00:01.000Z</published>
    <updated>2021-02-24T11:16:50.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-ffmpeg"><a href="#下载-ffmpeg" class="headerlink" title="下载 ffmpeg"></a>下载 ffmpeg</h2><p>百度网盘：<a href="https://pan.baidu.com/s/1TPE8JvDdfRxOaswIZJUKJg"><strong>点击下载</strong></a></p><p>提取码：<strong>8cjl</strong></p><h3 id="ffmpeg-简单用法"><a href="#ffmpeg-简单用法" class="headerlink" title="ffmpeg 简单用法"></a>ffmpeg 简单用法</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.ogv -vcodec h264 out.mp4</span><br><span class="line">ffmpeg -i out.ogv -vcodec mpeg4 out.mp4</span><br><span class="line">ffmpeg -i out.ogv -vcodec libxvid out.mp4</span><br><span class="line">ffmpeg -i out.mp4 -vcodec wmv1 out.wmv</span><br><span class="line">ffmpeg -i out.mp4 -vcodec wmv2 out.wmv</span><br></pre></td></tr></table></figure><p>-i 后面是输入文件名。</p><p>-vcodec 后面是编码格式，h264 最佳，但 Windows 系统默认不安装。</p><p>如果是要插入 ppt 的视频，选择 wmv1 或 wmv2 基本上万无一失。</p><p>附加选项：-r 指定帧率，-s 指定分辨率，-b 指定比特率；于此同时可以对声道进行转码，-acodec 指定音频编码，-ab 指定音频比特率，-ac 指定声道数，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.ogv -s 640x480 -b 500k -vcodec h264 -r 29.97 -acodec libfaac -ab 48k -ac 2 out.mp4</span><br></pre></td></tr></table></figure><h3 id="批量转换"><a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for %i in (*.flv) do ffmpeg -i %i -c copy &quot;newfiles\%~nv.mp4&quot;</span><br><span class="line">for %i in (*.mov) do ffmpeg -i %i -c copy &quot;newfiles\%~nv.mp4&quot;</span><br><span class="line"></span><br><span class="line">//批量转换视频格式</span><br><span class="line">ffmpeg -i xxx.avi -vcodec copy -f mp4 xxx.mp4</span><br><span class="line"></span><br><span class="line">//批量转换视频格式 --设定分辨率 --设置新文件位置</span><br><span class="line">for /R %v IN (*.mp4) do ( ffmpeg -i %v -vcodec h264 -vf scale=720:-2 -threads 4  &quot;newfiles\%~nv.mp4&quot;)</span><br></pre></td></tr></table></figure><h3 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h3><p>用 -ss 和 -t 选项， 从第 30 秒开始，向后截取 10 秒的视频，并保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.wmv -ss 00:00:30.0 -c copy -t 00:00:10.0 output.wmv</span><br><span class="line">ffmpeg -i input.wmv -ss 30 -c copy -t 10 output.wmv</span><br></pre></td></tr></table></figure><p>达成相同效果，也可以用 -ss 和 -to 选项， 从第 30 秒截取到第 40 秒：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.wmv -ss 30 -c copy -to 40 output.wmv</span><br></pre></td></tr></table></figure><p>值得注意的是，ffmpeg 为了加速，会使用关键帧技术， 所以有时剪切出来的结果在起止时间上未必准确。</p><p>通常来说，把 -ss 选项放在 -i 之前，会使用关键帧技术； 把 -ss 选项放在 -i 之后，则不使用关键帧技术。</p><p>如果要使用关键帧技术又要保留时间戳，可以加上 -copyts 选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:01:00 -i video.mp4 -to 00:02:00 -c copy -copyts cut.mp4</span><br></pre></td></tr></table></figure><p>截取视频段：输入”input.mp4”从 3 分钟开始截取视频段 60s 并保存输出为”output.mp4”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:03:00 -i input.mp4 -t 60 -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>把两个视频文件合并成一个。<br>简单地使用 concat demuxer，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat mylist.txt</span></span><br><span class="line">file &#x27;/path/to/file1&#x27;</span><br><span class="line">file &#x27;/path/to/file2&#x27;</span><br><span class="line">file &#x27;/path/to/file3&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ffmpeg -f concat -i mylist.txt -c copy output</span></span><br></pre></td></tr></table></figure><p>更多时候，由于输入文件的多样性，需要转成中间格式再合成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input1.avi -qscale:v 1 intermediate1.mpg</span><br><span class="line">ffmpeg -i input2.avi -qscale:v 1 intermediate2.mpg</span><br><span class="line">cat intermediate1.mpg intermediate2.mpg &gt; intermediate_all.mpg</span><br><span class="line">ffmpeg -i intermediate_all.mpg -qscale:v 2 output.avi</span><br></pre></td></tr></table></figure><p>合并视频及音频文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 0.mp4 -i 1.mp3 -c:v copy -c:a aac -strict experimental -map 0:v:0 -map 1:a:0 output.mp4</span><br></pre></td></tr></table></figure><h3 id="帧率设置"><a href="#帧率设置" class="headerlink" title="帧率设置"></a>帧率设置</h3><p>使用-r 选项<br>语法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input -r fps output</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.avi -r 30 output.mp4</span><br></pre></td></tr></table></figure><h3 id="比特率设置"><a href="#比特率设置" class="headerlink" title="比特率设置"></a>比特率设置</h3><p>比特率也是一个决定音视频总体质量的参数。他决定每个时间单位处理的 bit 数。</p><p>设置比特率：比特率决定处理 1s 的编码流需要多少 bits，设置用-b 选项。区分音视频用-b:a 和-b:v</p><p>例如：设置整体 1.5Mbit 每秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i file.avi -b 8M file.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -i input.avi -b:v 1500K output.mp4</span><br></pre></td></tr></table></figure><h3 id="去除水印"><a href="#去除水印" class="headerlink" title="去除水印"></a>去除水印</h3><p>设置: delogo=</p><p>水印位置：x=1000:y=15</p><p>水印大小：:w=250:h=160</p><p>显示绿框：:show=1（成品去除参数）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">ffmpeg -i logo.mp4 -filter_complex &quot;delogo=x=1000:y=15:w=250:h=160:show=1&quot; delogo.mp4</span><br><span class="line"></span><br><span class="line">水印：</span><br><span class="line">ffmpeg -i logo.mp4 -filter_complex &quot;delogo=x=1000:y=15:w=250:h=160&quot; delogo.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ffmpeg 基本用法</summary>
    
    
    
    <category term="ffmpeg" scheme="https://zedmoster.github.io/categories/ffmpeg/"/>
    
    
    <category term="ffmpeg" scheme="https://zedmoster.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>年薪50W+的Python程序员如何写代码</title>
    <link href="https://zedmoster.github.io/2021/02/23/1.python/%E5%B9%B4%E8%96%AA50W+%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    <id>https://zedmoster.github.io/2021/02/23/1.python/%E5%B9%B4%E8%96%AA50W+%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%86%99%E4%BB%A3%E7%A0%81/</id>
    <published>2021-02-23T12:00:00.000Z</published>
    <updated>2021-02-24T11:20:09.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年薪-50W-的-Python-程序员如何写代码"><a href="#年薪-50W-的-Python-程序员如何写代码" class="headerlink" title="年薪 50W+的 Python 程序员如何写代码"></a>年薪 50W+的 Python 程序员如何写代码</h2><h3 id="为什么要用-Python-写代码"><a href="#为什么要用-Python-写代码" class="headerlink" title="为什么要用 Python 写代码"></a>为什么要用 Python 写代码</h3><h4 id="没有对比就没有伤害"><a href="#没有对比就没有伤害" class="headerlink" title="没有对比就没有伤害"></a>没有对比就没有伤害</h4><blockquote><p><strong>很多互联网和移动互联网企业对开发效率的要求高于对执行效率的要求</strong>。</p></blockquote><a id="more"></a><h5 id="例子-1：hello-world"><a href="#例子-1：hello-world" class="headerlink" title="例子 1：hello, world"></a>例子 1：hello, world</h5><p>C 的版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="例子-2：1-100-求和"><a href="#例子-2：1-100-求和" class="headerlink" title="例子 2：1-100 求和"></a>例子 2：1-100 求和</h5><p>C 的版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        total += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sum(range(<span class="number">1</span>, <span class="number">101</span>)))</span><br></pre></td></tr></table></figure><h5 id="例子-3：创建和初始化数组（列表）"><a href="#例子-3：创建和初始化数组（列表）" class="headerlink" title="例子 3：创建和初始化数组（列表）"></a>例子 3：创建和初始化数组（列表）</h5><p>Java 的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] values = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">        Arrays.fill(values, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(Arrays.toString(values));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">            numbers[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values = [<span class="literal">True</span>] * <span class="number">10</span></span><br><span class="line">print(values)</span><br><span class="line">numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><h5 id="例子-4：双色球随机选号"><a href="#例子-4：双色球随机选号" class="headerlink" title="例子 4：双色球随机选号"></a>例子 4：双色球随机选号</h5><p>Java 的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生[min, max)范围的随机整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomInt</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.random() * (max - min) + min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出一组双色球号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(List&lt;Integer&gt; balls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; balls.size(); ++i) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%02d &quot;</span>, balls.get(i));</span><br><span class="line">            <span class="keyword">if</span> (i == balls.size() - <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;| &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一组随机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; redBalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">33</span>; ++i) &#123;</span><br><span class="line">            redBalls.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; selectedBalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">            selectedBalls.add(redBalls.remove(randomInt(<span class="number">0</span>, redBalls.size())));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(selectedBalls);</span><br><span class="line">        selectedBalls.add(randomInt(<span class="number">1</span>, <span class="number">17</span>));</span><br><span class="line">        <span class="keyword">return</span> selectedBalls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Scanner sc = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;机选几注: &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">                display(generate());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成一组随机号码&quot;&quot;&quot;</span></span><br><span class="line">    red_balls = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">34</span>)]</span><br><span class="line">    selected_balls = sample(red_balls, <span class="number">6</span>)</span><br><span class="line">    selected_balls.sort()</span><br><span class="line">    selected_balls.append(randint(<span class="number">1</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> selected_balls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">balls</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输出一组双色球号码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, ball <span class="keyword">in</span> <span class="built_in">enumerate</span>(balls):</span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;ball:<span class="number">0</span>&gt;2d&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(balls) - <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">&#x27;|&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;机选几注: &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    display(generate())</span><br></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong>：珍爱生命，远离任何形式的赌博。</p></blockquote><h5 id="例子-5：实现一个简单的-HTTP-服务器"><a href="#例子-5：实现一个简单的-HTTP-服务器" class="headerlink" title="例子 5：实现一个简单的 HTTP 服务器"></a>例子 5：实现一个简单的 HTTP 服务器</h5><p>Java 的版本：</p><blockquote><p><strong>说明</strong>：JDK 1.6 以前，需要通过套接字编程来实现，具体又可以分为多线程和 NIO 两种做法。JDK 1.6 以后，可以使用<code>com.sun.net.httpserver</code>包提供的<code>HttpServer</code>类来实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpExchange;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServer server = HttpServer.create(<span class="keyword">new</span> InetSocketAddress(<span class="number">8000</span>), <span class="number">0</span>);</span><br><span class="line">        server.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> RequestHandler());</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span> <span class="keyword">implements</span> <span class="title">HttpHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            String response = <span class="string">&quot;&lt;h1&gt;hello, world&lt;/h1&gt;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">try</span> (OutputStream os = exchange.getResponseBody()) &#123;</span><br><span class="line">                os.write(response.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span>(<span class="params">SimpleHTTPRequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(<span class="string">&#x27;&lt;h1&gt;hello, world&lt;/h1&gt;&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = HTTPServer((<span class="string">&#x27;&#x27;</span>, <span class="number">8000</span>), RequestHandler)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">8000</span></span><br></pre></td></tr></table></figure><h4 id="一行-Python-代码可以做什么"><a href="#一行-Python-代码可以做什么" class="headerlink" title="一行 Python 代码可以做什么"></a>一行 Python 代码可以做什么</h4><blockquote><p><strong>很多时候，你的问题只需一行 Python 代码就能解决</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行代码实现求阶乘函数</span></span><br><span class="line">fac = <span class="keyword">lambda</span> x: <span class="built_in">__import__</span>(<span class="string">&#x27;functools&#x27;</span>).reduce(<span class="built_in">int</span>.__mul__, <span class="built_in">range</span>(<span class="number">1</span>, x + <span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码实现求最大公约数函数</span></span><br><span class="line">gcd = <span class="keyword">lambda</span> x, y: y % x <span class="keyword">and</span> gcd(y % x, x) <span class="keyword">or</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码实现判断素数的函数</span></span><br><span class="line">is_prime = <span class="keyword">lambda</span> x: x &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> [f <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(x ** <span class="number">0.5</span>) + <span class="number">1</span>) <span class="keyword">if</span> x % f == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码实现快速排序</span></span><br><span class="line">quick_sort = <span class="keyword">lambda</span> items: <span class="built_in">len</span>(items) <span class="keyword">and</span> quick_sort([x <span class="keyword">for</span> x <span class="keyword">in</span> items[<span class="number">1</span>:] <span class="keyword">if</span> x &lt; items[<span class="number">0</span>]]) + [items[<span class="number">0</span>]] + quick_sort([x <span class="keyword">for</span> x <span class="keyword">in</span> items[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; items[<span class="number">0</span>]]) <span class="keyword">or</span> items</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成FizzBuzz列表</span></span><br><span class="line">[<span class="string">&#x27;Fizz&#x27;</span>[x % <span class="number">3</span> * <span class="number">4</span>:] + <span class="string">&#x27;Buzz&#x27;</span>[x % <span class="number">5</span> * <span class="number">4</span>:] <span class="keyword">or</span> x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)]</span><br></pre></td></tr></table></figure><h4 id="设计模式从未如此简单"><a href="#设计模式从未如此简单" class="headerlink" title="设计模式从未如此简单"></a>设计模式从未如此简单</h4><blockquote><p><strong>Python 是动态类型语言，大量的设计模式在 Python 中被简化或弱化</strong>。</p></blockquote><p>思考：如何优化下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(num - <span class="number">1</span>) + fib(num - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>代理模式在 Python 中可以通过内置的或自定义的装饰器来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(num - <span class="number">1</span>) + fib(num - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">121</span>):</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>: <span class="subst">&#123;fib(n)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：通过 Python 标准库<code>functools</code>模块的<code>lru_cache</code>装饰器为<code>fib</code>函数加上缓存代理，缓存函数执行的中间结果，优化代码的性能。</p></blockquote><p>单例模式在 Python 中可以通过自定义的装饰器或元类来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    lock = RLock()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">cls</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            <span class="keyword">with</span> lock:</span><br><span class="line">                <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">                    instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：需要实现单例模式的类只需要添加上面的装饰器即可。</p></blockquote><p>原型模式在 Python 中可以通过元类来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrototypeMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        cls.clone = <span class="keyword">lambda</span> self, is_deep=<span class="literal">True</span>: \</span><br><span class="line">            copy.deepcopy(self) <span class="keyword">if</span> is_deep <span class="keyword">else</span> copy.copy(self)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：通过元类给指定了<code>metaclass=PrototypeMeta</code>的类添加一个<code>clone</code>方法实现对象克隆，利用 Python 标准库<code>copy</code>模块的<code>copy</code>和<code>deepcopy</code>分别实现浅拷贝和深拷贝。</p></blockquote><h4 id="数据采集和数据分析从未如此简单"><a href="#数据采集和数据分析从未如此简单" class="headerlink" title="数据采集和数据分析从未如此简单"></a>数据采集和数据分析从未如此简单</h4><blockquote><p><strong>网络数据采集是 Python 最擅长的领域之一。</strong></p></blockquote><p>例子：获取豆瓣电影“Top250”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    resp = requests.get(</span><br><span class="line">        url=<span class="string">f&#x27;https://movie.douban.com/top250?start=<span class="subst">&#123;<span class="number">25</span> * page&#125;</span>&#x27;</span>,</span><br><span class="line">        headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;BaiduSpider&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    soup = BeautifulSoup(resp.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> soup.select(<span class="string">&#x27;a &gt; span.title:nth-child(1)&#x27;</span>):</span><br><span class="line">        print(elem.text)</span><br><span class="line">    time.sleep(random.random() * <span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>利用 NumPy、Pandas、Matplotlib 可以轻松实现数据分析和可视化</strong>。</p></blockquote><p><img src="/2021/02/23/1/use-pandas-in-jupyter-notebook.png" alt="0"></p><h3 id="写出-Python-代码的正确姿势"><a href="#写出-Python-代码的正确姿势" class="headerlink" title="写出 Python 代码的正确姿势"></a>写出 Python 代码的正确姿势</h3><blockquote><p><strong>用 Python 写代码就要写出 Pythonic 的代码</strong>。</p></blockquote><h4 id="姿势-1：选择结构的正确姿势"><a href="#姿势-1：选择结构的正确姿势" class="headerlink" title="姿势 1：选择结构的正确姿势"></a>姿势 1：选择结构的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;jackfrued&#x27;</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line">owners = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(fruits) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(owners.keys()) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;Jackfrued love fruits.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;jackfrued&#x27;</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line">owners = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;骆昊&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">and</span> fruits <span class="keyword">and</span> owners:</span><br><span class="line">    print(<span class="string">&#x27;Jackfrued love fruits.&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="姿势-2：交换两个变量的正确姿势"><a href="#姿势-2：交换两个变量的正确姿势" class="headerlink" title="姿势 2：交换两个变量的正确姿势"></a>姿势 2：交换两个变量的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a ^ b</span><br><span class="line">a = a ^ b</span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h4 id="姿势-3：用序列组装字符串的正确姿势"><a href="#姿势-3：用序列组装字符串的正确姿势" class="headerlink" title="姿势 3：用序列组装字符串的正确姿势"></a>姿势 3：用序列组装字符串的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">    name += char</span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">name = <span class="string">&#x27;&#x27;</span>.join(chars)</span><br></pre></td></tr></table></figure><h4 id="姿势-4：遍历列表的正确姿势"><a href="#姿势-4：遍历列表的正确姿势" class="headerlink" title="姿势 4：遍历列表的正确姿势"></a>姿势 4：遍历列表的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    print(index, <span class="string">&#x27;:&#x27;</span>, fruit)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line">    print(index, <span class="string">&#x27;:&#x27;</span>, fruit)</span><br></pre></td></tr></table></figure><h4 id="姿势-5：创建列表的正确姿势"><a href="#姿势-5：创建列表的正确姿势" class="headerlink" title="姿势 5：创建列表的正确姿势"></a>姿势 5：创建列表的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">11</span>]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span>:</span><br><span class="line">        result.append(i * <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">7</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">11</span>]</span><br><span class="line">result = [num * <span class="number">3</span> <span class="keyword">for</span> num <span class="keyword">in</span> data <span class="keyword">if</span> num &gt; <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="姿势-6：确保代码健壮性的正确姿势"><a href="#姿势-6：确保代码健壮性的正确姿势" class="headerlink" title="姿势 6：确保代码健壮性的正确姿势"></a>姿势 6：确保代码健壮性的正确姿势</h4><p>跨界开发者的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> data <span class="keyword">and</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;x&#x27;</span>], (<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>)) \</span><br><span class="line">        <span class="keyword">and</span> data[<span class="string">&#x27;x&#x27;</span>].isdigit():</span><br><span class="line">    value = <span class="built_in">int</span>(data[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>Pythonic 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = <span class="built_in">int</span>(data[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">except</span> (KeyError, TypeError, ValueError):</span><br><span class="line">    value = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="使用-Lint-工具检查你的代码规范"><a href="#使用-Lint-工具检查你的代码规范" class="headerlink" title="使用 Lint 工具检查你的代码规范"></a>使用 Lint 工具检查你的代码规范</h3><p>阅读下面的代码，看看你能看出哪些地方是有毛病的或者说不符合 Python 的编程规范的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suite</span> (<span class="params">Enum</span>):</span></span><br><span class="line">    SPADE, HEART, CLUB, DIAMOND = <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,suite,face </span>):</span></span><br><span class="line">        self.suite = suite</span><br><span class="line">        self.face = face</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        suites=<span class="string">&#x27;♠♥♣♦&#x27;</span></span><br><span class="line">        faces=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;suites[self.suite.value]&#125;</span><span class="subst">&#123;faces[self.face]&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poker</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.cards =[Card(suite, face) <span class="keyword">for</span> suite <span class="keyword">in</span> Suite</span><br><span class="line">            <span class="keyword">for</span> face <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">        self.current=<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span> (<span class="params">self</span>):</span></span><br><span class="line">        self.current=<span class="number">0</span></span><br><span class="line">        random.shuffle(self.cards)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal</span> (<span class="params">self</span>):</span></span><br><span class="line">        card = self.cards[self.current]</span><br><span class="line">        self.current+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_next</span> (<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current&lt;<span class="built_in">len</span>(self.cards): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">p = Poker()</span><br><span class="line">p.shuffle()</span><br><span class="line">print(p.cards)</span><br></pre></td></tr></table></figure><h4 id="PyLint-的安装和使用"><a href="#PyLint-的安装和使用" class="headerlink" title="PyLint 的安装和使用"></a>PyLint 的安装和使用</h4><p>Pylint 是 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（默认使用的代码风格是 PEP 8）和有潜在问题的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pylint</span><br><span class="line">pylint [options] module_or_package</span><br></pre></td></tr></table></figure><p>Pylint 输出格式如下所示。</p><blockquote><p>模块名:行号:列号: 消息类型 消息</p></blockquote><p>消息类型有以下几种：</p><ol><li>C - 惯例：违反了 Python 编程惯例（PEP 8）的代码。</li><li>R - 重构：写得比较糟糕需要重构的代码。</li><li>W - 警告：代码中存在的不影响代码运行的问题。</li><li>E - 错误：代码中存在的影响代码运行的错误。</li><li>F - 致命错误：导致 Pylint 无法继续运行的错误。</li></ol><p>Pylint 命令的常用参数：</p><ol><li><code>--disable=&lt;msg ids&gt;</code>或<code>-d &lt;msg ids&gt;</code>：禁用指定类型的消息。</li><li><code>--errors-only</code>或<code>-E</code>：只显示错误。</li><li><code>--rcfile=&lt;file&gt;</code>：指定配置文件。</li><li><code>--list-msgs</code>：列出 Pylint 的消息清单。</li><li><code>--generate-rcfile</code>：生成配置文件的样例。</li><li><code>--reports=&lt;y_or_n&gt;</code>或<code>-r &lt;y_or_n&gt;</code>：是否生成检查报告。</li></ol><h3 id="使用-Profile-工具剖析你的代码性能"><a href="#使用-Profile-工具剖析你的代码性能" class="headerlink" title="使用 Profile 工具剖析你的代码性能"></a>使用 Profile 工具剖析你的代码性能</h3><h4 id="cProfile-模块"><a href="#cProfile-模块" class="headerlink" title="cProfile 模块"></a>cProfile 模块</h4><p><code>example01.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeIter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, total</span>):</span></span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.current = <span class="number">1</span></span><br><span class="line">        self.total = total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.counter &lt; self.total:</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> is_prime(self.current):</span><br><span class="line">                self.current += <span class="number">1</span></span><br><span class="line">            self.counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.current</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cProfile.run(<span class="string">&#x27;list(PrimeIter(10000))&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">114734 function calls in 0.573 seconds</span><br><span class="line"></span><br><span class="line">Ordered by: standard name</span><br><span class="line"></span><br><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">     1    0.006    0.006    0.573    0.573 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class="line">     1    0.000    0.000    0.000    0.000 example.py:14(__init__)</span><br><span class="line">     1    0.000    0.000    0.000    0.000 example.py:19(__iter__)</span><br><span class="line"> 10001    0.086    0.000    0.567    0.000 example.py:22(__next__)</span><br><span class="line">104728    0.481    0.000    0.481    0.000 example.py:5(is_prime)</span><br><span class="line">     1    0.000    0.000    0.573    0.573 &#123;built-in method builtins.exec&#125;</span><br><span class="line">     1    0.000    0.000    0.000    0.000 &#123;method &#39;disable&#39; of &#39;_lsprof.Profiler&#39; objects&#125;</span><br></pre></td></tr></table></figure><h4 id="line-profiler"><a href="#line-profiler" class="headerlink" title="line_profiler"></a>line_profiler</h4><p>给需要剖析时间性能的函数加上一个<code>profile</code>装饰器，这个函数每行代码的执行次数和时间都会被剖析。</p><p><code>example02.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeIter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, total</span>):</span></span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.current = <span class="number">1</span></span><br><span class="line">        self.total = total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.counter &lt; self.total:</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> is_prime(self.current):</span><br><span class="line">                self.current += <span class="number">1</span></span><br><span class="line">            self.counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.current</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(PrimeIter(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><p>安装和使用<code>line_profiler</code>三方库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pip install line_profiler</span><br><span class="line">kernprof -lv example.py</span><br><span class="line"></span><br><span class="line">Wrote profile results to example02.py.lprof</span><br><span class="line">Timer unit: 1e-06 s</span><br><span class="line"></span><br><span class="line">Total time: 0.089513 s</span><br><span class="line">File: example02.py</span><br><span class="line">Function: is_prime at line 1</span><br><span class="line"></span><br><span class="line"> <span class="comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line"> 1                                           @profile</span><br><span class="line"> 2                                           def is_prime(num):</span><br><span class="line"> 3     86624      43305.0      0.5     48.4      <span class="keyword">for</span> factor <span class="keyword">in</span> range(2, int(num ** 0.5) + 1):</span><br><span class="line"> 4     85624      42814.0      0.5     47.8          <span class="keyword">if</span> num % factor == 0:</span><br><span class="line"> 5      6918       3008.0      0.4      3.4              <span class="built_in">return</span> False</span><br><span class="line"> 6      1000        386.0      0.4      0.4      <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure><h4 id="memory-profiler"><a href="#memory-profiler" class="headerlink" title="memory_profiler"></a>memory_profiler</h4><p>给需要剖析内存性能的函数加上一个<code>profile</code>装饰器，这个函数每行代码的内存使用情况都会被剖析。</p><p><code>example03.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat_memory</span>():</span></span><br><span class="line">    items = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        items.append(<span class="built_in">object</span>())</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eat_memory()</span><br></pre></td></tr></table></figure><p>安装和使用<code>memory_profiler</code>三方库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pip install memory_profiler</span><br><span class="line">python3 -m memory_profiler example.py</span><br><span class="line"></span><br><span class="line">Filename: example03.py</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#    Mem usage    Increment   Line Contents</span></span><br><span class="line">================================================</span><br><span class="line">     <span class="number">1</span>   <span class="number">38.672</span> MiB   <span class="number">38.672</span> MiB   @profile</span><br><span class="line">     <span class="number">2</span>                             <span class="function"><span class="keyword">def</span> <span class="title">eat_memory</span>():</span></span><br><span class="line">     <span class="number">3</span>   <span class="number">38.672</span> MiB    <span class="number">0.000</span> MiB       items = []</span><br><span class="line">     <span class="number">4</span>   <span class="number">68.727</span> MiB    <span class="number">0.000</span> MiB       <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">     <span class="number">5</span>   <span class="number">68.727</span> MiB    <span class="number">1.797</span> MiB           items.append(<span class="built_in">object</span>())</span><br><span class="line">     <span class="number">6</span>   <span class="number">68.727</span> MiB    <span class="number">0.000</span> MiB       <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><h3 id="如何构建综合职业素养"><a href="#如何构建综合职业素养" class="headerlink" title="如何构建综合职业素养"></a>如何构建综合职业素养</h3><hr><h4 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h4><ol><li>了解全局</li><li>确定范围</li><li>定义目标</li><li>寻找资源</li><li>创建学习计划</li><li>筛选资源</li><li>开始学习，浅尝辄止（YAGNI）</li><li>动手操作，边学边玩</li><li>全面掌握，学以致用</li><li>乐为人师，融会贯通</li></ol><hr><h4 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h4><ol><li>提升专注力</li><li>充分利用碎片时间</li><li>使用番茄工作法</li><li>时间是怎么浪费掉的</li><li>任何行动都比不采取行动好</li></ol><hr>]]></content>
    
    
    <summary type="html">年薪50W+的Python程序员如何写代码</summary>
    
    
    
    <category term="python" scheme="https://zedmoster.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>05.git 使用</title>
    <link href="https://zedmoster.github.io/2021/02/09/LinuxPrimer/05.git%E4%BD%BF%E7%94%A8/"/>
    <id>https://zedmoster.github.io/2021/02/09/LinuxPrimer/05.git%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-09T12:00:05.000Z</published>
    <updated>2021-02-08T21:11:34.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h2><p>初始化命令、查看状态、管理文件、配置等</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入需要管理的文件夹 -- 初始化命令</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录下文件的状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理指定文件</span></span><br><span class="line">git add 文件名</span><br><span class="line"><span class="comment"># 管理目录下所有文件及文件夹</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人信息配置：用户名、邮箱 -- 仅配置一次即可</span></span><br><span class="line">git config --global user.email <span class="string">&quot;UserName@gmail.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;UserName&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:10809</span><br><span class="line">git config --global https.proxy http://127.0.0.1:10809</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成版本</span></span><br><span class="line">git commit -m <span class="string">&quot;描述版本信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本回滚到之前的版本</span></span><br><span class="line">git reset --hard 版本号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到之后的版本</span></span><br><span class="line">git reflog</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><h2 id="自定义一键-add-commit-push-操作"><a href="#自定义一键-add-commit-push-操作" class="headerlink" title="自定义一键 add . / commit / push 操作"></a>自定义一键 add . / commit / push 操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="comment"># 打开文件夹 C:\Program Files\Git\etc</span></span><br><span class="line"><span class="comment"># 打开文件 .gitconfig</span></span><br><span class="line"><span class="comment"># 添加下方内容</span></span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    ad = <span class="string">&quot;!f() &#123; git add -A &amp;&amp; git commit -m \&quot;<span class="variable">$@</span>\&quot; &amp;&amp; git push; &#125;; f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用法： git ad &quot;commit message&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习安装子系统 Linux</summary>
    
    
    
    <category term="linux" scheme="https://zedmoster.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zedmoster.github.io/tags/linux/"/>
    
    <category term="Shell" scheme="https://zedmoster.github.io/tags/Shell/"/>
    
    <category term="git" scheme="https://zedmoster.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>04.vim 自动补齐 python</title>
    <link href="https://zedmoster.github.io/2021/02/09/LinuxPrimer/04.vim%E8%87%AA%E5%8A%A8%E8%A1%A5%E9%BD%90python/"/>
    <id>https://zedmoster.github.io/2021/02/09/LinuxPrimer/04.vim%E8%87%AA%E5%8A%A8%E8%A1%A5%E9%BD%90python/</id>
    <published>2021-02-09T12:00:04.000Z</published>
    <updated>2021-02-08T21:09:30.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pydiction"><a href="#Pydiction" class="headerlink" title="Pydiction"></a>Pydiction</h2><p><strong>Pydiction</strong> 可以使我们使用 Tab 键自动补全 Python 代码在 Vim，是一款非常不错的插件。<br>不需要安装，所有没有任何依赖包问题。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir -p ~/.vim/bundle</span><br><span class="line"><span class="comment"># 打开目录</span></span><br><span class="line">cd ~/.vim/bundle</span><br><span class="line"><span class="comment"># 下载 Pydiction</span></span><br><span class="line">git clone https://github.com/rkulla/pydiction.git</span><br><span class="line"><span class="comment"># 复制文件到指定位置</span></span><br><span class="line">cp -r ~/.vim/bundle/pydiction/after/ ~/.vim</span><br><span class="line"><span class="comment"># 新建.vimrc文件</span></span><br><span class="line">vim ~/.vimrc</span><br><span class="line"><span class="comment"># 在.vimrc文件添加如下配置：</span></span><br><span class="line"></span><br><span class="line">filetype plugin on</span><br><span class="line">autocmd FileType python <span class="built_in">set</span> omnifunc=pythoncomplete<span class="comment">#Complete</span></span><br><span class="line">let g:pydiction_location=<span class="string">&#x27;~/.vim/bundle/pydiction/complete-dict&#x27;</span></span><br><span class="line">let g:pydiction_menu_height = <span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> filetype=python</span><br><span class="line">au BufNewFile,BufRead *.py,*.pyw setf python</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> shiftwidth=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> textwidth=<span class="number">79</span></span><br><span class="line"><span class="built_in">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"><span class="built_in">set</span> fileformat=unix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启后 使用Tab键自动补全python代码了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习安装子系统 Linux</summary>
    
    
    
    <category term="linux" scheme="https://zedmoster.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zedmoster.github.io/tags/linux/"/>
    
    <category term="Shell" scheme="https://zedmoster.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>03.安装 pip 命令</title>
    <link href="https://zedmoster.github.io/2021/02/09/LinuxPrimer/03.%E5%AE%89%E8%A3%85pip%E5%91%BD%E4%BB%A4/"/>
    <id>https://zedmoster.github.io/2021/02/09/LinuxPrimer/03.%E5%AE%89%E8%A3%85pip%E5%91%BD%E4%BB%A4/</id>
    <published>2021-02-09T12:00:03.000Z</published>
    <updated>2021-02-08T21:09:34.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-pip-或-pip3"><a href="#安装-pip-或-pip3" class="headerlink" title="安装 pip 或 pip3"></a>安装 pip 或 pip3</h2><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装python2 版本 pip</span></span><br><span class="line">sudo apt install python-pip</span><br><span class="line"><span class="comment"># 安装python3 版本 pip3</span></span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h2 id="仅使用-python3-时使用-pip-代替-pip3"><a href="#仅使用-python3-时使用-pip-代替-pip3" class="headerlink" title="仅使用 python3 时使用 pip 代替 pip3"></a>仅使用 python3 时使用 pip 代替 pip3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 添加替换的内容</span></span><br><span class="line">alias pip=<span class="string">&quot;pip3&quot;</span></span><br><span class="line">alias python=<span class="string">&quot;python3&quot;</span></span><br><span class="line"><span class="comment"># 保存后更新配置</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="更换-pip-源"><a href="#更换-pip-源" class="headerlink" title="更换 pip 源"></a>更换 pip 源</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开创建文件夹</span></span><br><span class="line">mkdir ~/.config/pip/</span><br><span class="line"><span class="comment"># 打开文件目录</span></span><br><span class="line">cd ~/.config/pip/</span><br><span class="line"><span class="comment"># 创建并打开文件</span></span><br><span class="line">vim pip.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容并保存</span></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><hr><h2 id="安装卸载软件"><a href="#安装卸载软件" class="headerlink" title="安装卸载软件"></a>安装卸载软件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install ipython3</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">sudo apt remove ipython3</span><br></pre></td></tr></table></figure><h2 id="安装-scrapy-后创建软连接"><a href="#安装-scrapy-后创建软连接" class="headerlink" title="安装 scrapy 后创建软连接"></a>安装 scrapy 后创建软连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确定安装位置</span></span><br><span class="line">/usr/local/python3/<span class="built_in">bin</span>/scrapy</span><br><span class="line"><span class="comment"># 建立软链接</span></span><br><span class="line">ln -s /usr/local/python3/<span class="built_in">bin</span>/scrapy /usr/<span class="built_in">bin</span>/scrapy</span><br><span class="line"><span class="comment"># 删除软链接</span></span><br><span class="line">rm -rf scrapy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习安装子系统 Linux</summary>
    
    
    
    <category term="linux" scheme="https://zedmoster.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zedmoster.github.io/tags/linux/"/>
    
    <category term="Shell" scheme="https://zedmoster.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>02.Ubuntu 镜像使用帮助</title>
    <link href="https://zedmoster.github.io/2021/02/09/LinuxPrimer/02.%E6%9B%B4%E6%8D%A2%E5%AE%89%E8%A3%85%E6%BA%90/"/>
    <id>https://zedmoster.github.io/2021/02/09/LinuxPrimer/02.%E6%9B%B4%E6%8D%A2%E5%AE%89%E8%A3%85%E6%BA%90/</id>
    <published>2021-02-09T12:00:02.000Z</published>
    <updated>2021-02-08T21:09:37.106Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 的软件源配置文件是 <strong>/etc/apt/sources.list</strong></p><h2 id="设置流"><a href="#设置流" class="headerlink" title="设置流"></a>设置流</h2><ul><li><strong>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</strong></li><li><strong>cd /etc/apt/</strong></li><li><strong>sudo vim sources.list</strong></li></ul><p>将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p><a id="more"></a><h2 id="软件源镜像-18-04-LTS"><a href="#软件源镜像-18-04-LTS" class="headerlink" title="软件源镜像:18.04 LTS"></a>软件源镜像:18.04 LTS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><h2 id="软件源镜像-20-04-LTS"><a href="#软件源镜像-20-04-LTS" class="headerlink" title="软件源镜像:20.04 LTS"></a>软件源镜像:20.04 LTS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习安装子系统 Linux</summary>
    
    
    
    <category term="linux" scheme="https://zedmoster.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zedmoster.github.io/tags/linux/"/>
    
    <category term="Shell" scheme="https://zedmoster.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>01.Window 安装子系统 Linux</title>
    <link href="https://zedmoster.github.io/2021/02/09/LinuxPrimer/01.%E5%AE%89%E8%A3%85%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zedmoster.github.io/2021/02/09/LinuxPrimer/01.%E5%AE%89%E8%A3%85%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-02-09T12:00:01.000Z</published>
    <updated>2021-02-08T21:09:39.964Z</updated>
    
    <content type="html"><![CDATA[<ul><li>设置 -&gt; 应用和功能 -&gt; <strong>启用或关闭 Windows 功能</strong></li></ul><p><img src=".//1.%E5%90%AF%E7%94%A8%E5%8A%9F%E8%83%BD.png" alt="start" title="启用子系统"></p><ul><li><p>打开商店，搜素 <strong>ubuntu</strong> 安装相应版本即可</p></li><li><p>打开系统，第一次打开等待安装完成后<strong>设置用户名及密码</strong></p></li></ul><a id="more"></a><hr><h2 id="子系统-ubuntu-vim-字体显示"><a href="#子系统-ubuntu-vim-字体显示" class="headerlink" title="子系统 ubuntu vim 字体显示"></a>子系统 ubuntu vim 字体显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开注册列表位置</span></span><br><span class="line"><span class="comment"># 计算机\HKEY_CURRENT_USER\Console\</span></span><br><span class="line"><span class="comment"># 选择 ubuntu 系统目录 右键 添加 &quot;DWORD（32 位）值&quot;</span></span><br><span class="line"><span class="comment"># 添加 CodePage</span></span><br><span class="line"><span class="comment"># 十进制值 65001</span></span><br></pre></td></tr></table></figure><p><img src=".//2.%E6%98%BE%E7%A4%BA%E5%AD%97%E4%BD%93.png" alt="font" title="vim 字体显示设置"></p><h2 id="Windows-的-ubuntu-子系统-VsCode-打开"><a href="#Windows-的-ubuntu-子系统-VsCode-打开" class="headerlink" title="Windows 的 ubuntu 子系统 VsCode 打开"></a>Windows 的 ubuntu 子系统 VsCode 打开</h2><ul><li><p>1.Visual Studio Code 安装插件 “Remote - WSL”</p></li><li><p>2.打开<strong>ubuntu</strong>子系统,输入 <strong>code .</strong></p></li></ul>]]></content>
    
    
    <summary type="html">学习安装子系统 Linux</summary>
    
    
    
    <category term="linux" scheme="https://zedmoster.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zedmoster.github.io/tags/linux/"/>
    
    <category term="Shell" scheme="https://zedmoster.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>2.13 提示 TaskDialog</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.13%20%E6%8F%90%E7%A4%BATaskDialog/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.13%20%E6%8F%90%E7%A4%BATaskDialog/</id>
    <published>2021-02-09T00:08:19.000Z</published>
    <updated>2021-02-08T21:06:30.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-TaskDialog"><a href="#创建-TaskDialog" class="headerlink" title="创建 TaskDialog"></a>创建 TaskDialog</h2><p><strong>TaskDialogs</strong> 是 Revit 中的用于提供详细的用户反馈 API 类。它们可以用一行代码执行，如下所示：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TaskDialog.Show(<span class="string">&quot;Example Title&quot;</span>, <span class="string">&quot;Example Text&quot;</span>)</span><br></pre></td></tr></table></figure><p>TaskDialogs 可用于向用户提供一定程度的反馈，可能时想报告脚本是成功运行还是遇到什么错误等情况。</p><p><img src=".//2.13.Taskdialog.JPG" alt="TaskDialogs"></p><hr><h2 id="自定义-TaskDialog"><a href="#自定义-TaskDialog" class="headerlink" title="自定义 TaskDialog"></a>自定义 TaskDialog</h2><p>TaskDialog 也可以通过类的属性对其进行编辑，以使内容更加丰富，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task_dialog = TaskDialog(<span class="string">&quot;Example Title&quot;</span>)</span><br><span class="line">task_dialog.CommonButtons = TaskDialogCommonButtons.Cancel | TaskDialogCommonButtons.Ok | TaskDialogCommonButtons.Close |     TaskDialogCommonButtons.No | TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.Retry | TaskDialogCommonButtons.<span class="literal">None</span></span><br><span class="line">task_dialog.FooterText = <span class="string">&quot;Example Footer Text&quot;</span></span><br><span class="line">task_dialog.MainInstruction = <span class="string">&quot;Example Main Instruction&quot;</span></span><br><span class="line">task_dialog.MainContent = <span class="string">&quot;This is the main content for this TaskDialog&quot;</span></span><br><span class="line"></span><br><span class="line">task_dialog.Show()</span><br></pre></td></tr></table></figure><p>提示窗口样式</p><p><img src=".//2.13.Taskdialog02.JPG" alt="TaskDialogs"></p>]]></content>
    
    
    <summary type="html">TaskDialogs will give users quick-and-dirty visual feedback</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.12 内置类别</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.12%20%E5%86%85%E7%BD%AE%E7%B1%BB%E5%88%AB/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.12%20%E5%86%85%E7%BD%AE%E7%B1%BB%E5%88%AB/</id>
    <published>2021-02-09T00:08:18.000Z</published>
    <updated>2021-02-08T21:06:25.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BuiltInCategory"><a href="#BuiltInCategory" class="headerlink" title="BuiltInCategory"></a>BuiltInCategory</h2><p>Revit 用户界面向用户显示了许多类别，例如门，楼板和常规模型等。Revit 在内部使用更详细的类别列表，称为内置类别。内置类别的完整列表可以在 <strong>BuiltInCategory</strong> 枚举中找到-这些是固定编码，不能创建修改。</p><a id="more"></a><h2 id="检索类别元素"><a href="#检索类别元素" class="headerlink" title="检索类别元素"></a>检索类别元素</h2><p>由于该列表涵盖了近 1000 个类别，因此可以帮助我门更精确地定位 Revit 元素。内置类别对于 <strong>FilteredElementCollectors</strong> 尤其有用，它使我们能够准确检索特定的元素。</p><p>例如，要收集文档中的所有 <strong>面积标签</strong> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">area_tags = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_AreaTags).ToElements()</span><br><span class="line">OUT = area_tags</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Revit的Category系统精细划分</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.11 Units 单位处理</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.11%20Units%E5%8D%95%E4%BD%8D%E5%A4%84%E7%90%86/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.11%20Units%E5%8D%95%E4%BD%8D%E5%A4%84%E7%90%86/</id>
    <published>2021-02-09T00:08:17.000Z</published>
    <updated>2021-02-08T21:06:20.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Revit-长度"><a href="#Revit-长度" class="headerlink" title="Revit 长度"></a>Revit 长度</h2><p>Revit 长度内部单位：<strong>英尺</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">detail_line = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line">decimal_feet_length = detail_line.GeometryCurve.Length</span><br><span class="line">OUT = decimal_feet_length  <span class="comment"># 单位：英尺</span></span><br></pre></td></tr></table></figure><p>上面代码返回的数据单位并不是我们常用的毫米单位，所以需要对数据进行单位转换。</p><h3 id="单位转换（毫米）"><a href="#单位转换（毫米）" class="headerlink" title="单位转换（毫米）"></a>单位转换（毫米）</h3><p>使用 Revit 的 <strong>UnitUtils</strong> 类，且参数只能从 Revit 的 <strong>DisplayUnitType</strong> 枚举中选择值类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">detail_line = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line">decimal_feet_length = detail_line.GeometryCurve.Length</span><br><span class="line">metric_length = UnitUtils.Convert(decimal_feet_length, DisplayUnitType.DUT_DECIMAL_FEET, DisplayUnitType.DUT_MILLIMETERS)  <span class="comment"># 将英尺转换为毫米</span></span><br><span class="line">OUT = metric_length  <span class="comment"># 单位：毫米</span></span><br></pre></td></tr></table></figure><h2 id="角度"><a href="#角度" class="headerlink" title="角度"></a>角度</h2><h3 id="单位转换（弧度）"><a href="#单位转换（弧度）" class="headerlink" title="单位转换（弧度）"></a>单位转换（弧度）</h3><p>Revit 角度内部单位：<strong>弧度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">angle = <span class="number">90.0</span>  <span class="comment"># 角度值</span></span><br><span class="line">radians_equivalent = UnitUtils.Convert(angle, DisplayUnitType.DUT_DECIMAL_DEGREES, DisplayUnitType.DUT_RADIANS)  <span class="comment"># 将角度转换为弧度</span></span><br><span class="line">OUT = radians_equivalent  <span class="comment"># 单位：弧度</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Feet and Millimetres</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.10 提示用户界面选择</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.10%20%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E9%80%89%E6%8B%A9/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.10%20%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E9%80%89%E6%8B%A9/</id>
    <published>2021-02-09T00:08:16.000Z</published>
    <updated>2021-02-08T20:36:20.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户选择工作流程"><a href="#用户选择工作流程" class="headerlink" title="用户选择工作流程"></a>用户选择工作流程</h2><p>有时我们可能会构建一个通用工具，要求用户选择文档中的 Revit 元素（例如，元素重新编号工具）。这将需要无限数量的可自定义过滤器，以使用户能够使用逻辑选择他们选择的元素，但是我们可以通过提示用户选择某些内容来跳过整个问题。</p><h2 id="ISelectionFilter-接口"><a href="#ISelectionFilter-接口" class="headerlink" title="ISelectionFilter 接口"></a>ISelectionFilter 接口</h2><p><strong>ISelectionFilter</strong> 可以限制用户可以选择的元素种类。只需要创建一个实现该接口的新类。</p><p>然后，将此类的实例作为参数提供给 <strong>PickElementsByRectangle()</strong> 方法。例如，提示用户选择 Walls 所需的代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载过滤选择的接口 ISelectionFilter</span></span><br><span class="line"><span class="keyword">from</span> Autodesk.Revit.UI.Selection <span class="keyword">import</span> ISelectionFilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义选择过滤器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySelectionFilter</span>(<span class="params">ISelectionFilter</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AllowElement</span>(<span class="params">self, element</span>):</span></span><br><span class="line">        <span class="keyword">return</span> element.Category.Name == <span class="string">&quot;墙&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AllowReference</span>(<span class="params">self, element</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">selection_filter = MySelectionFilter()                            <span class="comment"># 仅选择墙</span></span><br><span class="line">walls = uidoc.Selection.PickElementsByRectangle(selection_filter) <span class="comment"># 返回框选的墙体</span></span><br><span class="line">OUT = walls</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">指定选择UI</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.9 批处理文档</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.9%20%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E6%A1%A3/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.9%20%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E6%A1%A3/</id>
    <published>2021-02-09T00:08:15.000Z</published>
    <updated>2021-02-08T21:06:11.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>批处理 Revit 文件 Revit API 的最强大功能之一就是能够以自动方式打开，关闭，编辑和保存文档。最重要的是，我们可以“无头”实现这一目标，这意味着无需任何 GUI 组件即可打开 Revit 文档的数据库。一般而言，以这种方式处理文档可能比用户这样做快 20 到 30 倍-这意味着构建涉及快速批处理许多文件时可以使用这种方式。</p><a id="more"></a><ul><li><strong>批处理步骤</strong>：<ul><li>根据目标文档的文件路径，创建 <strong>Revit FilePath</strong> 对象的列表，遍历此文档路径列表</li><li>使用 Revit API 的 <strong>Open()</strong> 方法打开文件并为此打开的文档创建一个句柄</li><li>通过其句柄打开针对我们新打开的文档的处理</li><li>根据需求进行 API 调用，具体取决于要执行的具体操作</li><li>关闭打开文档。如果需要保存更改，可将文档进行另存。</li></ul></li></ul><h2 id="python-节点代码"><a href="#python-节点代码" class="headerlink" title="python 节点代码"></a>python 节点代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input_paths = IN[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 设置打开方式</span></span><br><span class="line">open_options = OpenOptions()</span><br><span class="line">report = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> input_paths:</span><br><span class="line">    filepath = FilePath(path)</span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    family_doc = app.OpenDocumentFile(filepath, open_options)</span><br><span class="line">    dimensions = FilteredElementCollector(family_doc).OfCategory(BuiltInCategory.OST_Dimensions).WhereElementIsNotElementType().ToElements()</span><br><span class="line">    number_dimensions = <span class="built_in">len</span>(dimensions)</span><br><span class="line">    report.append(<span class="string">&quot;File &#123;&#125; contains &#123;&#125; dimensions&quot;</span>.<span class="built_in">format</span>(path, number_dimensions))</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    family_doc.Close(<span class="literal">False</span>)</span><br><span class="line">OUT = report <span class="comment">#Outputting the report we generated</span></span><br></pre></td></tr></table></figure><h2 id="dynamo-节点"><a href="#dynamo-节点" class="headerlink" title="dynamo 节点"></a>dynamo 节点</h2><p><img src=".//2.9.files.jpg" alt="example"></p>]]></content>
    
    
    <summary type="html">Opening and closing files &#39;headlessly&#39; unlocked some powerful workflows</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.8 处理事务 Transactions</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.8%20%E5%A4%84%E7%90%86%E4%BA%8B%E5%8A%A1%20Transactions/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.8%20%E5%A4%84%E7%90%86%E4%BA%8B%E5%8A%A1%20Transactions/</id>
    <published>2021-02-09T00:08:14.000Z</published>
    <updated>2021-02-08T21:05:40.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Revit-是数据库"><a href="#Revit-是数据库" class="headerlink" title="Revit 是数据库"></a>Revit 是数据库</h2><p>需要对该数据库的更改进行仔细的排序，需要对过程进行管理和检查（针对架构的有效性以及针对 Revit API 设计的合法性）。所有这些都由 Revit 的本机 <strong>Transaction API</strong> 处理。</p><a id="more"></a><h2 id="Dynamo’s-TransactionManager"><a href="#Dynamo’s-TransactionManager" class="headerlink" title="Dynamo’s TransactionManager"></a>Dynamo’s TransactionManager</h2><p>当直接为 Revit API 编码时，我们可以通过使用代码实例化 <strong>Transaction</strong> 类的新对象并调用其 <strong>Start()</strong> 方法来简单地启动新事务。但是，在 Dynamo 中，我们通常使用下面这种方式进行处理。</p><p><em>TransactionManager</em> 是 Dynamo API 的一部分，该 API 处理 Dynamo 应用程序中对 Revit 文档数据库所做的更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TransactionManager.Instance.EnsureInTransaction(doc)    <span class="comment"># 为 doc 文档开启事务</span></span><br><span class="line"><span class="comment"># 增、删、改操作Revit文档</span></span><br><span class="line"></span><br><span class="line">TransactionManager.Instance.TransactionTaskDone()       <span class="comment"># 提交更新</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>简而言之，主体代码都写在样板代码的这两行代码之间即可。</strong></p></blockquote>]]></content>
    
    
    <summary type="html">使用事务很容易，没有它可能还真不行！</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.7 访问图元参数 Parameters</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.7%20%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%85%83%E5%8F%82%E6%95%B0%20Parameters/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.7%20%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%85%83%E5%8F%82%E6%95%B0%20Parameters/</id>
    <published>2021-02-09T00:08:13.000Z</published>
    <updated>2021-02-08T21:05:36.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="族、族类型、族实例之间的关系"><a href="#族、族类型、族实例之间的关系" class="headerlink" title="族、族类型、族实例之间的关系"></a>族、族类型、族实例之间的关系</h2><p>Revit 的族系使用族类型和族实例之间的层次关系。API 中并行存在相同的关系：</p><ul><li><strong>族实例</strong> 是 Revit 的 <strong>FamilyInstance</strong> 类的实例。例如：项目中创建的门、窗</li><li><strong>族类型</strong> 是 Revit 的 <strong>FamilyType</strong> 类的实例。例如：防火门 FM1822 类型</li></ul><a id="more"></a><hr><p>族实例参数通过 <strong>FamilyInstance</strong> 对象访问，而族类型的参数通过实例的 <strong>FamilyType</strong> 类型对象访问。</p><blockquote><p>包含关系：<strong>FamilyInstance -&gt; FamilyType -&gt; Family</strong></p></blockquote><p>每个<em>FamilyInstance</em>都是通过<em>FamilyType</em>创建。同样，每个<em>FamilyType</em>将由项目文档中的加载的<em>Family</em>族文件定义。</p><p>下面演示如何从<em>FamilyInstance</em>向上找到<em>FamilyType</em>类型，再通过<em>FamilyType</em>找到<em>Family</em>族：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">family_instance = UnwrapElement(IN[<span class="number">0</span>])         <span class="comment"># 展开dynamo图元得到Revit族实例</span></span><br><span class="line">family_type_id = family_instance.GetTypeId()   <span class="comment"># 获取族实例的类型Id</span></span><br><span class="line">family_type = doc.GetElement(family_type_id)   <span class="comment"># 通过类型Id获取族类型</span></span><br><span class="line">family = family_type.Family                    <span class="comment"># 通过类型获取族Family</span></span><br><span class="line">OUT = family_instance, family_type, family     <span class="comment"># 输出 [族实例, 族类型, 族]</span></span><br></pre></td></tr></table></figure><p>反方向查找：<em>Family</em>对象通常包含多个的<em>FamilyType</em>对象之间存在多对一的关系。同样，有许多放置相同<em>FamilyType</em>的<em>FamilyInstances</em>。要获得一个家庭的所有 family_type，我们可以使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">family = UnwrapElement(IN[<span class="number">0</span>])                                    <span class="comment"># 展开dynamo图元得到Revit族</span></span><br><span class="line">family_type_ids = family.GetFamilySymbolIds()                    <span class="comment"># 获取族包含的所有类型Id</span></span><br><span class="line">family_types = [doc.GetElement(<span class="built_in">id</span>) <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> family_type_ids]    <span class="comment"># 获取所有的族类型存再列表中</span></span><br><span class="line">OUT = family_types                                               <span class="comment"># 输出族类型列表</span></span><br></pre></td></tr></table></figure><p>寻找特定类型的所有<em>FamilyInstance</em>对象是那么简单-我们首先需要创建一个 <strong>FamilyInstanceFilter</strong> 使用所需<em>FamilyType</em>的 ID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展开dynamo图元得到Revit族</span></span><br><span class="line">family = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 获取族包含的所有类型Id</span></span><br><span class="line">family_type_ids = family.GetFamilySymbolIds()</span><br><span class="line"><span class="comment"># 创建族实例列表</span></span><br><span class="line">family_instances = []</span><br><span class="line"><span class="comment"># 寻找类型对应的实例</span></span><br><span class="line"><span class="keyword">for</span> family_type_id <span class="keyword">in</span> family_type_ids:</span><br><span class="line">    <span class="comment"># 创建指定类型的过滤器</span></span><br><span class="line">    family_instance_filter = FamilyInstanceFilter(doc, family_type_id)</span><br><span class="line">    <span class="comment"># 获取文档中所有类型的实例对象</span></span><br><span class="line">    elements = FilteredElementCollector(doc).WherePasses(family_instance_filter).ToElements()</span><br><span class="line">    <span class="comment"># 将实例对象添加到列表</span></span><br><span class="line">    family_instances.append(elements)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">OUT = family_instances</span><br></pre></td></tr></table></figure><hr><h2 id="族实例和族类型参数"><a href="#族实例和族类型参数" class="headerlink" title="族实例和族类型参数"></a>族实例和族类型参数</h2><h3 id="获取族实例参数"><a href="#获取族实例参数" class="headerlink" title="获取族实例参数"></a>获取族实例参数</h3><p>如果要与传递 Dynamo 元素到节点中与 Revit 元素进行交互，则需要将其展开。展开后，可以访问特定参数将所有元素实例参数的列表作为 Parameter 对象返回，可以通过其 Element.Parameters 属性访问，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">family_instance = UnwrapElement(IN[<span class="number">0</span>])            <span class="comment"># 族实例对象</span></span><br><span class="line">instance_parameters = family_instance.Parameters  <span class="comment"># 实例包含的所有参数</span></span><br></pre></td></tr></table></figure><h3 id="获取族类型参数"><a href="#获取族类型参数" class="headerlink" title="获取族类型参数"></a>获取族类型参数</h3><p>类型参数需要通过元素的族类型来访问。如果将<em>FamilyInstance</em>作为输入，则首先需要获取元素的 FamilyType 对象，例如 <strong>GetTypeId()</strong> 此方法返回元素的族类型的<em>ElementId</em>。然后，我们可以使用 <strong>doc.GetElement()</strong> 方法返回元素的<em>FamilyType</em>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">family_instance = UnwrapElement(IN[<span class="number">0</span>])                      <span class="comment"># 族实例对象</span></span><br><span class="line">family_type = doc.GetElement(family_instance.GetTypeId())   <span class="comment"># 通过实例获取类型</span></span><br><span class="line">type_parameters = family_type.Parameters                    <span class="comment"># 类型包含的所有参数</span></span><br></pre></td></tr></table></figure><h3 id="访问指定参数"><a href="#访问指定参数" class="headerlink" title="访问指定参数"></a>访问指定参数</h3><p>对于获取 FamilyInstance 或 FamilyType 的参数，有以下方法来访问特定参数：</p><ul><li><strong>Element.LookupParameter()</strong></li><li><strong>Element.get_Parameter()</strong></li></ul><p>这两种方法本质上都是相同的。它们返回一个 <strong>Parameter</strong> 对象。选择 Revit 门实例对象：</p><p><img src=".//2.7.parameter.png" alt="A simple example; reading the Mark value of an element."></p><h3 id="获取参数值"><a href="#获取参数值" class="headerlink" title="获取参数值"></a>获取参数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_element = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line">paratemer = input_element.LookupParameter(<span class="string">&quot;顶高度&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果输出原始<em>Parameter</em>对象，它将显示为<strong>Autodesk.Revit.DB.Parameter</strong>，为了获取参数 <strong>Parameter</strong> 对象的值，您需要使用 Parameter 类的对其进行转换。</p><p>依据判断值的类型进行取值即可：</p><ul><li><strong>AsDouble()</strong></li><li><strong>AsElementId()</strong></li><li><strong>AsInteger()</strong></li><li><strong>AsString()</strong></li></ul><hr><ul><li><strong>AsValueString()</strong></li></ul><p>使用上面的方法以适当的数据类型返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_element = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line">value = input_element.LookupParameter(<span class="string">&quot;顶高度&quot;</span>).AsValueString() <span class="comment"># value = 2400</span></span><br></pre></td></tr></table></figure><p>此工作流程等效于在 Dynamo 中使用 GetParameterValueByName 节点。</p><h3 id="设置参数值"><a href="#设置参数值" class="headerlink" title="设置参数值"></a>设置参数值</h3><p>同样需要获取到<em>Parameter</em>对象，使用 <strong>Set()</strong> 方法进行赋值即可,当然更改参数的这个操作修改了文件的内容，所以应该开启 <strong>Transaction</strong> 事务。</p><p><img src=".//2.7.parameterAsValueString.png" alt="AsValueString">。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TransactionManager.Instance.EnsureInTransaction(doc) <span class="comment"># 事务开始</span></span><br><span class="line">input_element = UnwrapElement(IN[<span class="number">0</span>])</span><br><span class="line">input_element.LookupParameter(<span class="string">&quot;顶高度&quot;</span>).Set(<span class="number">2000</span>)</span><br><span class="line">TransactionManager.Instance.TransactionTaskDone()    <span class="comment"># 事务结束</span></span><br></pre></td></tr></table></figure><p>Set 值对象的类型包括：</p><ul><li><strong>Set(float)</strong></li><li><strong>Set(int)</strong></li><li><strong>Set(ElementId)</strong></li><li><strong>Set(str)</strong></li></ul><hr>]]></content>
    
    
    <summary type="html">访问参数是使用Revit API并开始运行所需要的基本技能之一。熟练使用Revit非常有用！</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.6 几何(Geometry)转换</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.6%20%E5%87%A0%E4%BD%95(Geometry)%E8%BD%AC%E6%8D%A2/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.6%20%E5%87%A0%E4%BD%95(Geometry)%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-02-09T00:08:12.000Z</published>
    <updated>2021-02-08T21:05:27.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Revit-几何图形和-Dynamo-几何图形"><a href="#Revit-几何图形和-Dynamo-几何图形" class="headerlink" title="Revit 几何图形和 Dynamo 几何图形"></a>Revit 几何图形和 Dynamo 几何图形</h2><p>Dynamo 具有与 Revit 并行的类库。意味着需要使用特殊的转换方法来使两者之间进行转换实现数据交互。前面章节也提到过需要展开对象。</p><a id="more"></a><h2 id="转换方式"><a href="#转换方式" class="headerlink" title="转换方式"></a>转换方式</h2><p>您可以使用 Dynamo API 的转换方法轻松地在 Dynamo 和 Revit 几何类型之间进行切换:</p><ul><li><strong>ToProtoType()</strong></li><li><strong>ToDSType()</strong></li><li><strong>ToLine()</strong></li><li><strong>ToPoint()</strong></li><li><strong>ToVector()</strong></li><li><strong>ToXyz()</strong></li></ul><h2 id="Points"><a href="#Points" class="headerlink" title="Points"></a>Points</h2><p>Revit 点在 3D 空间中由其 X，Y 和 Z 坐标定义。创建方法：先创建点的对象 <strong>Autodesk.Revit.DB.XYZ</strong>，在创建 Revit 点 <strong>Autodesk.Revit.DB.Point.Create</strong> 方法创建，该方法需要传入点的对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XYZ revit_xyz = <span class="keyword">new</span> Autodesk.Revit.DB.XYZ(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment">// 创建点对象</span></span><br><span class="line">Point revit_point = Autodesk.Revit.DB.Point.Create(revit_xyz) <span class="comment">// 创建点</span></span><br></pre></td></tr></table></figure><p>要创建 Dynamo 点，我们需要使用 Designscript 库，该库是 Dynamo 的一部分。Dynamo 点的类型为 <strong>Autodesk.DesignScript.Geometry.Point</strong> 如果从 Python 节点输出以下 dynamo_point，它将立即显示在 Dynamo 的 3D 背景预览中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dynamo_point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment"># 创建点</span></span><br><span class="line">OUT = dynamo_point  <span class="comment"># 输出点视图将显示</span></span><br></pre></td></tr></table></figure><ul><li>注意：即使我们在这里创建 Revit 对象，在这种情况下，也不需要将它们包装在 <strong>Transaction</strong> 事务中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">revit_xyz = Autodesk.Revit.DB.XYZ(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment"># Revit XYZ</span></span><br><span class="line"><span class="comment"># 使用XYZ对象创建点</span></span><br><span class="line">revit_point = Autodesk.Revit.DB.Point.Create(revit_xyz)</span><br><span class="line">OUT = revit_xyz, revit_point</span><br></pre></td></tr></table></figure><p>我们可以从 Python 脚本节点输出 XYZ 和 Point，但是除非将它们转换为 Dynamo 类型，否则它们将在 Dynamo 几何预览中不可见： <em>ToPoint() ToProtoType()</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revit_xyz = Autodesk.Revit.DB.XYZ(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">revit_point = Autodesk.Revit.DB.Point.Create(revit_xyz)</span><br><span class="line">OUT = revit_xyz.ToPoint(), revit_point.ToProtoType()</span><br></pre></td></tr></table></figure><h2 id="Lines-Curves"><a href="#Lines-Curves" class="headerlink" title="Lines / Curves"></a>Lines / Curves</h2><p>​​ 先看一下 Dynamo 类：Dynamo 有两个<strong>线型</strong>几何类。了解他们之间存在区别。</p><ul><li><strong>Autodesk.DesignScript.Geometry.Line</strong> 线段，具有起点和终点。</li><li><strong>Autodesk.DesignScript.Geometry.Curve</strong> 复杂的曲面或 UV 坐标。Dynamo 的 <strong>Curve</strong> 类包含 <strong>Line</strong> 。</li></ul><p>为了使这个示例简单，我们将在下面显示如何创建一条简单的 Dynamo 行。首先，我们将创建 Dynamo 点，然后将其用作定义直线的起点和终点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dynamo_point_1 = Autodesk.DesignScript.Geometry.Point.ByCoordinates(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment"># 创建起点</span></span><br><span class="line">dynamo_point_2 = Autodesk.DesignScript.Geometry.Point.ByCoordinates(<span class="number">10</span>,<span class="number">10</span>,<span class="number">0</span>) <span class="comment"># 创建终点</span></span><br><span class="line">dynamo_line = Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint(dynamo_point_1, dynamo_point_2) <span class="comment"># 传入参数起点和终点创建Dynamo线段</span></span><br><span class="line">OUT = dynamo_line <span class="comment"># 返回线段</span></span><br></pre></td></tr></table></figure><p>下面尝试使用 python 脚本节点输出，并使用 <strong>ToProtoType()</strong> 将其转换为 Dynamo 几何类型，否则在 Dynamo 几何预览中将不可见。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">revit_xyz_1 = XYZ(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">revit_xyz_2 = XYZ(<span class="number">10</span>,<span class="number">10</span>,<span class="number">0</span>)</span><br><span class="line">revit_line = Line.CreateBound(revit_xyz_1, revit_xyz_2)</span><br><span class="line">OUT = revit_line.ToProtoType()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Dynamo geometry and Revit geometry might seem similar but are different!</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.5 过滤器 FilteredElementCollector</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.5%20%E8%BF%87%E6%BB%A4%E5%99%A8%20FilteredElementCollector/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.5%20%E8%BF%87%E6%BB%A4%E5%99%A8%20FilteredElementCollector/</id>
    <published>2021-02-09T00:08:11.000Z</published>
    <updated>2021-02-08T21:05:23.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>处理模型的前提是获取到相应类型的元素。Revit 的 <strong>FilteredElementCollector</strong> 允许您使用一组自定义的过滤规则，在 Revit 文档的数据库中快速搜索元素。您可以将搜索过滤器和修饰符堆叠在一起，从而使您可以进行几乎无限次的自定义搜索。</p><a id="more"></a><h2 id="举个简单的例子"><a href="#举个简单的例子" class="headerlink" title="举个简单的例子"></a>举个简单的例子</h2><p><em>FilteredElementCollectors</em> 将返回 <em>Element</em> 或 <em>ElementIds</em> 的列表。</p><p>快速组合在一起非常简单。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all_furniture = FilteredElementCollector(doc)             <span class="comment"># 创建过滤器</span></span><br><span class="line">all_furniture.OfCategory(BuiltInCategory.OST_Furniture)   <span class="comment"># 过滤家具（包含：实例和类型）</span></span><br><span class="line">all_furniture.WhereElementIsNotElementType()              <span class="comment"># 过滤项目中家具实例</span></span><br><span class="line">all_furniture.ToElements()                                <span class="comment"># 结果转换为Element对象列表</span></span><br><span class="line">OUT = all_furniture                                       <span class="comment"># 输出对象</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>这段代码首先创建一个新的 <em>FilteredElementCollector</em> 实例，该实例将 Revit 文档作为其构造函数中的参数。</li><li>第 4 行添加了一个进一步的过滤器-我们不想在返回的元素中仅包含家具族类型，而仅是实例。</li><li>在第 5 行中，我们指定我们希望 FilteredElementCollector 返回实际的 Revit 元素。</li><li>最后，第 6 行使用 <em>OUT</em> 从节点输出收集的元素。</li></ol></blockquote><p>也可以将上述脚本压缩为一行，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_furniture = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElements()</span><br><span class="line">OUT = all_furniture</span><br></pre></td></tr></table></figure><ul><li>这两个脚本将返回完全相同的对象，因此可以选择使用哪个版本:较长的版本还是较冗长的版本</li><li>建议使用下面这种简洁</li></ul><h2 id="过滤器使用指南"><a href="#过滤器使用指南" class="headerlink" title="过滤器使用指南"></a><strong>过滤器使用指南</strong></h2><p><strong>关于如何为元素组装基本过滤器的分步指南：</strong></p><ol><li><p><strong>知道您要过滤的内容</strong></p><ul><li><p>如果这是 Revit 类别的元素，请在 <strong>BuiltInCategory</strong> 枚举中找到等效的 <strong>BuiltInCategory</strong> 类型。</p></li><li><p>否则，如果您正在寻找特定 API 类的元素，则可以使用 <strong>.OfClass()</strong> 过滤器，并在 <em>Class</em> 名称中添加一个参数类别。</p></li></ul></li><li><p><strong>您是否要返回元素实例或其类型</strong></p><ul><li>例如，您要查找文档中的所有 <strong>TextNotes</strong> 实例还是所有 <strong>TextNoteTypes</strong> 族类型<ul><li>如果需要实例，请使用 <strong>.WhereElementIsNotElementType()</strong> 过滤器</li><li>如果需要类型，请使用 <strong>.WhereElementIsElementType()</strong> 过滤器</li><li>如果您两者都想要，则不要使用过滤器</li></ul></li></ul></li><li><p><strong>是否要返回 Revit 元素或元素的 ID</strong></p><ul><li>使用 <strong>.ToElements()</strong> 或 <strong>.ToElementIds()</strong> 完成您的 <strong>FilteredElementCollector</strong> 查询。</li></ul></li></ol><h2 id="进阶筛选"><a href="#进阶筛选" class="headerlink" title="进阶筛选"></a>进阶筛选</h2><p>上面是构建基本 <strong>FilteredElementCollector</strong> 的大致指南。但是，您可以构建更多自定义过滤器：</p><ul><li><p>您可以使用 <strong>ElementLevelFilter</strong> 来过滤某个级别上托管的元素，或者使用 <strong>ElementWorksetFilter</strong> 来仅过滤特定工作集上的元素。</p></li><li><p>您可以建立自定义评估规则。是否仅在指定参数值或 Height 参数大于 3000mm 的元素中寻找元素？这些都是可以轻松实现的。</p></li><li><p>此页面只是刮擦 <strong>FilteredElementCollectors</strong> 的表面。</p></li></ul><hr><h3 id="快速过滤器-QuickFilters"><a href="#快速过滤器-QuickFilters" class="headerlink" title="快速过滤器-QuickFilters"></a>快速过滤器-QuickFilters</h3><ul><li><strong>ElementCategoryFilter</strong> ：与输入类别 ID 匹配的元素；<ul><li>快捷方式：<strong>OfCategory</strong></li></ul></li><li><strong>ElementClassFilter</strong>：与输入运行时类匹配的元素；<ul><li>快捷方式：<strong>OfClass</strong></li></ul></li><li><strong>ElementIsElementTypeFilter</strong>：是“元素类型”（符号）的元素；<ul><li>快捷方式：<strong>WhereElementIsElementType / WhereElementIsNotElementType</strong></li></ul></li><li><strong>ElementOwnerViewFilter</strong>：特定于视图的元素；<ul><li>快捷方式：<strong>OwnedByView / WhereElementIsViewIndependent</strong></li></ul></li><li><strong>ElementDesignOptionFilter</strong>：特定设计选项中的元素；<ul><li>快捷方式：<strong>ContainedInDesignOption</strong></li></ul></li><li><strong>ElementIsCurveDrivenFilter</strong>：曲线驱动的元素；<ul><li>快捷方式：<strong>WhereElementIsCurveDriven</strong></li></ul></li><li><strong>ElementStructuralTypeFilter</strong>：匹配给定结构类型的元素</li><li><strong>FamilySymbolFilter</strong>：特定家庭的符号</li><li><strong>ExclusionFilter</strong>：除输入到过滤器中的元素 ID 之外的所有元素</li><li><strong>BoundingBoxIntersectsFilter</strong>：具有与给定轮廓相交的边界框的元素</li><li><strong>BoundingBoxIsInsideFilter</strong>：在给定轮廓内具有边界框的元素</li><li><strong>BoundingBoxContainsPointFilter</strong>：具有包含给定点的边界框的元素</li></ul>]]></content>
    
    
    <summary type="html">Revit API中最强大的工具之一--快速获取元素！</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.3 了解 Doc, UIDoc, App, UIApp</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.3%20%E4%BA%86%E8%A7%A3%20Doc,%20UIDoc,%20App,%20UIApp/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.3%20%E4%BA%86%E8%A7%A3%20Doc,%20UIDoc,%20App,%20UIApp/</id>
    <published>2021-02-09T00:08:10.000Z</published>
    <updated>2021-02-08T21:56:36.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样板代码"><a href="#样板代码" class="headerlink" title="样板代码"></a>样板代码</h2><p>正如在样板代码一章中所见，Revit 样板代码通常需要设置 Revit 应用程序和文档 <strong>doc，uidoc，app，uiapp</strong>的句柄。</p><p>但是为什么呢？</p><a id="more"></a><h2 id="Application-and-Document"><a href="#Application-and-Document" class="headerlink" title="Application and Document"></a>Application and Document</h2><p>一开始，API 的这一部分似乎有些混乱。问题比比皆是：Revit 不能仅算出我所处的文档（即模型）吗？为什么我有一个 Document 和一个 UIDocument？为什么要引用应用程序-应用程序不是 Revit 吗？ 这些是很好的问题。幸运的是，Revit 的 API 指南为我们提供了一些答案：</p><blockquote><p>Revit Platform API 中的顶级对象是应用程序和文档。这些由类 Application，UIApplication，Document 和 UIDocument 表示。</p><ul><li><strong>应用程序对象引用一个单独的 Revit 会话</strong> 提供对文档，选项以及其他应用程序范围的数据和设置的访问。<ul><li><strong>Autodesk.Revit.UI.UIApplication</strong> 提供对应用程序的 UI 级别界面的访问，包括将 RibbonPanels 添加到用户界面的能力，以及在用户界面中获取活动文档的能力。</li><li><strong>Autodesk.Revit.ApplicationServices.Application</strong> 提供对所有其他应用程序级别属性的访问。</li></ul></li><li><strong>该文档对象是代表建筑模型的单个 Revit 项目文件</strong> Revit 可以打开多个项目，并为一个项目提供多个视图。<ul><li><strong>Autodesk.Revit.UI.UIDocument</strong> 提供对文档的 UI 级别界面的访问，例如选择内容以及提示用户进行选择和选择点的功能</li><li><strong>Autodesk.Revit.DB.Document</strong> 提供对所有其他文档级别属性的访问</li></ul></li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>一次可以打开多个 Revit 文档（包括.rfa 文件），因此需要指定要定位的文档。</li><li>您还可以具有多个 Revit 应用程序的运行实例，因此您需要指定要定位的应用程序。</li><li>Document / UIDocument 和 Application / UIApplication 拆分是由 API 设计人员决定的。UI 类通常引用用户界面元素或需要交互的元素（例如提示用户在主 Revit 窗口中选择元素）。</li></ul><p>主要要知道的是，我们的样板代码中的 doc，uidoc，app 和 uiapp 句柄对于涉及编辑 Revit 文档的许多操作都是必不可少的。例如，要删除某些内容？您需要参考要从中删除内容的文档！</p>]]></content>
    
    
    <summary type="html">这是怎么回事DOC？了解您将始终使用的这些重要句柄！</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.4 展开Revit元素</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.4%20%E5%B1%95%E5%BC%80Revit%E5%85%83%E7%B4%A0/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.4%20%E5%B1%95%E5%BC%80Revit%E5%85%83%E7%B4%A0/</id>
    <published>2021-02-09T00:08:10.000Z</published>
    <updated>2021-02-08T21:56:42.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-Unwrapping"><a href="#About-Unwrapping" class="headerlink" title="About Unwrapping"></a><strong>About Unwrapping</strong></h2><p>展开元素？现在有一些奇怪的术语！简而言之：引入节点的 Revit 元素在使用前需要先’unwrapped’。 但是为了了解所有含义，我们需要对 Dynamo 的最初开发方式有一点了解。</p><a id="more"></a><hr><h3 id="回顾历史-🏰"><a href="#回顾历史-🏰" class="headerlink" title="回顾历史 🏰"></a><strong>回顾历史 🏰</strong></h3><p>Dynamo 最初被认为是 <strong>Ian Keough</strong> 的开源爱好项目。Dynamo 最初仅用于与 Revit 集成，但它还需要 Revit API 本身不提供的扩展功能，例如可视化抽象几何。</p><p>围绕此问题的方法是，Ian 的新应用程序使用其自己的等效类型实质上封装 Revit API 中的大约 1700 个类-这些类型的功能可以根据 Dynamo 的要求进行构建。</p><p>因此，Revit 的类与 Dynamo 的等效类之间存在细微且不可察觉的差异（此类类称为“包装器类”）。</p><hr><p>如果我们检查 Revit 对象的类名称及其等效的 Dynamo 对象，则可以看到。例如，让我们看一下 Level 对象：</p><ul><li>在 Revit 的 API 中，Level 类的完全限定名称为：<strong>Autodesk.Revit.DB.Level</strong></li><li>在 Dynamo 中，Level 类的完全限定名称为：<strong>Revit.Elements.Level</strong></li></ul><h2 id="编码-ToRevitType"><a href="#编码-ToRevitType" class="headerlink" title="编码 ToRevitType"></a>编码 ToRevitType</h2><p>通常，Dynamo 会完成这两个工作之间的所有工作，即不可见地包裹和展开包裹元素。除了编写代码时，我们不必担心具体的技术细节。</p><p>在编写 IronPython 脚本时，我们可能会将元素作为输入提供给 Python 脚本节点。在我们解开它们之前，这些元素仍将是 Dynamo 的”包装”类型。在我们这样做之前，Revit 的类型和 Dynamo 的等效类型不能很好地配合使用。</p><p>展开元素非常简单，就像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 UnwrapElement() 方法</span></span><br><span class="line"><span class="comment"># 将 Dynamo 元素类型转换为 Revit 元素类型</span></span><br><span class="line">revitElements = UnwrapElement(IN[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong> 未能使用 UnwrapElement 本身不会引发错误，但是在读取属性或使用包装类型的方法时会出错。</li></ul><hr><p>无需总是解开元素 **UnwrapElement()**，仅当它们从 Python Script 节点外部传入时使用即可。</p><p>例如，当使用 FilteredElementCollector 收集元素时，我们将绕过 Dynamo 并直接与 Revit 的 API 获取数据，该 API 将 Revit 的本身类型返回给我们，所以不需要解开元素！</p>]]></content>
    
    
    <summary type="html">Revit元素就像香蕉-最好在食用前先展开包装</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2.2 如何阅读Revit的API文档</title>
    <link href="https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.2%20%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBRevit%E7%9A%84API%E6%96%87%E6%A1%A3/"/>
    <id>https://zedmoster.github.io/2021/02/09/PythonScriptPrimer/2.2%20%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBRevit%E7%9A%84API%E6%96%87%E6%A1%A3/</id>
    <published>2021-02-09T00:08:09.000Z</published>
    <updated>2021-02-08T21:56:39.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-APIDocs-Co"><a href="#使用-APIDocs-Co" class="headerlink" title="使用 APIDocs.Co"></a>使用 APIDocs.Co</h2><p>由于该网站对于希望熟悉 Revit API 的人来说是非常宝贵的资源，因此我们提供了使用该网站的简要指南。</p><p><img src=".//2.2.API.png" alt="Api 文档注释"></p><a id="more"></a><hr><p>典型的工作流程将涉及确保已为要使用的产品选择合适版本的 API（在左窗格中），然后在 API 文档中搜索您关注的相关主题。<br>例如，如果要了解有关 <strong>FamilyInstance</strong> 类的更多信息，只需在搜索栏中搜索它，然后从自动完成选项中选择它即可。然后，有关此类的详细信息将显示在右侧的详细信息窗格中：</p><ol><li>这是您正在查看的页面的名称。Revit API 有超过 22,000 页，但其中的大部分都是不经常使用的！</li><li>这个 <strong>&lt;&gt;</strong> 按钮将在几个流行的 Github 存储库中搜索有关该类的任何代码示例。</li><li><strong>Members</strong> 将带您到显示该类的所有方法，属性，接口或构造函数的整个页面。</li></ol><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p><strong>Members:</strong> 类的成员页面只是将其所有方法，属性等收集在一个页面上。如果不确定某个类是否具有特定功能，这将非常有用。</p><p><strong>Methods:</strong> 类方法是它可以运行的功能。可以将它们视为动词 <strong>do something</strong> 的实例可以做什么。例如，FamilyInstance 类型的对象具有 <strong>flipHand()</strong> 方法，可让您翻转其处理方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可是使用 flipHand 翻转 my_family_instance 实例对象</span></span><br><span class="line">my_family_instance.flipHand()</span><br></pre></td></tr></table></figure><ul><li>注意：对 Revit 文档所做的任何更改都必须在开始事务 <strong>Transaction</strong> .</li></ul><p><strong>Properties:</strong> 属性更像是类的”形容词”，可帮助您了解有关该类特定对象（即实例）的更多状态。例如，FamilyInstance 类具有一个 <strong>HandFlipped</strong> 属性，可以查询该属性的值，反应了该特定实例的是否已翻转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这将返回True或False，具体取决于对象是否翻转</span></span><br><span class="line">is_it_handflipped = my_family_instance.HandFlipped</span><br></pre></td></tr></table></figure><p><strong>Constructors:</strong></p><p>API 中的构造函数实际上是在告诉您如何创建类的实例。例如，XYZ 类用于在 Revit 中定义点。我们可以使用其构造函数来创建一个新的，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的点</span></span><br><span class="line">my_point = XYZ(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>注意：与 Dynamo 不同的是 Revit 创建的几何对象是不可见的</li></ul><p><strong>Enumerations:</strong></p><p>这些也称为枚举，它们是硬编码的列表，通常不打算更改并且将选择限制为一组选项。交通信号灯状态的枚举应类似于：</p><ul><li>Red</li><li>Yellow</li><li>Green</li></ul><p>因此，用户创建的任何交通信号灯对象都需要将其交通信号灯状态设置为软件供应商定义的预写状态之一。您可以选择枚举值，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enum枚举中的一种预定义状态</span></span><br><span class="line">traffic_light_value = TrafficLightState.Green</span><br></pre></td></tr></table></figure><hr><p>Revit API 中的一些关键的枚举类型：</p><ul><li><strong>BuiltInCategory</strong> : 类型</li><li><strong>BuiltInParameter</strong> : 参数</li><li><strong>DisplayUnitType</strong> : 单位</li></ul>]]></content>
    
    
    <summary type="html">Revit的API很大，其文档也是如此。在这里学习定位关键字内容</summary>
    
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/categories/dynamo/"/>
    
    
    <category term="dynamo" scheme="https://zedmoster.github.io/tags/dynamo/"/>
    
    <category term="python" scheme="https://zedmoster.github.io/tags/python/"/>
    
  </entry>
  
</feed>
