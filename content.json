{"meta":{"title":"龙|Engineer|BIMer","subtitle":"轨迹","description":"记录学习轨迹","author":"龙","url":"https://zedmoster.github.io","root":"/"},"pages":[{"title":"about","date":"2021-02-08T08:38:02.000Z","updated":"2021-02-08T11:26:40.718Z","comments":true,"path":"about/index.html","permalink":"https://zedmoster.github.io/about/index.html","excerpt":"","text":"专业：土木工程（2017） 职业：软件工程师、建筑工程师 学习：BIM、python、C#"},{"title":"categories","date":"2021-02-08T08:34:08.000Z","updated":"2021-02-08T11:26:23.807Z","comments":true,"path":"categories/index.html","permalink":"https://zedmoster.github.io/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2021-02-08T08:34:16.000Z","updated":"2021-02-08T11:32:16.602Z","comments":true,"path":"search/index.html","permalink":"https://zedmoster.github.io/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-08T08:33:55.000Z","updated":"2021-02-08T11:26:16.317Z","comments":true,"path":"tags/index.html","permalink":"https://zedmoster.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"1.3 基本：输入和输出","slug":"PythonScriptPrimer/1.3 基本：输入和输出","date":"2021-02-08T12:05:00.000Z","updated":"2021-02-08T12:14:10.913Z","comments":true,"path":"2021/02/08/PythonScriptPrimer/1.3 基本：输入和输出/","link":"","permalink":"https://zedmoster.github.io/2021/02/08/PythonScriptPrimer/1.3%20%E5%9F%BA%E6%9C%AC%EF%BC%9A%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/","excerpt":"输入和输出IN 和 OUT 是 Dynamo 的 Python 节点中的重要关键字。IN 关键字告诉节点引用通过其输入发送到节点的任何数据。 注意：后面所有的程序代码均运行在模板文件代码块内","text":"输入和输出IN 和 OUT 是 Dynamo 的 Python 节点中的重要关键字。IN 关键字告诉节点引用通过其输入发送到节点的任何数据。 注意：后面所有的程序代码均运行在模板文件代码块内 通过它们的索引可以访问各种输入，例如下面的 list_of_numbers： 12345678input_list_of_numbers = IN[0] # 获取外部节点输入output_list_of_numbers = [] # 创建空列表作为输出的内容for number in input_list_of_numbers: new_number = number + 1 output_list_of_numbers.append(new_number)OUT = output_list_of_numbers # 输出新的列表内容（传入的值每个数字均进行 +1 操作） 在此示例中，我们最初为输出创建一个空列表。我们遍历输入列表中的每个数字，并将其进行 +1 操作后添加到我们创建的输出列表中。最后，通过 OUT 关键字输出列表。 实际上，它看起来像这样： 输入和输出的类型Dynamo 节点可以将任何种类的数据作为输入，并可以输出任何种类的数据作为输出。 它能够将元素（例如 Revit 元素），抽象数字，字符串，Dynamo 几何图形以及其他所有内容作为输入。 但是，将 Revit 元素输入到 Python 节点时有一个警告。 Revit 元素需要进行转换类型后，才能通过 API 进行访问。 了解 Dynamo Revit 数据类型转换","categories":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/categories/dynamo/"}],"tags":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/tags/dynamo/"},{"name":"python","slug":"python","permalink":"https://zedmoster.github.io/tags/python/"}]},{"title":"1.2 样板代码设置","slug":"PythonScriptPrimer/1.2 样板代码设置","date":"2021-02-08T12:00:50.000Z","updated":"2021-02-08T12:12:54.275Z","comments":true,"path":"2021/02/08/PythonScriptPrimer/1.2 样板代码设置/","link":"","permalink":"https://zedmoster.github.io/2021/02/08/PythonScriptPrimer/1.2%20%E6%A0%B7%E6%9D%BF%E4%BB%A3%E7%A0%81%E8%AE%BE%E7%BD%AE/","excerpt":"样板代码设置复制代码文件到本地保存为 RevitApi.py","text":"样板代码设置复制代码文件到本地保存为 RevitApi.py 1234567891011121314151617181920212223242526272829303132333435import clrimport syssys.path.append(&#x27;C:\\Program Files (x86)\\IronPython 2.7\\Lib&#x27;)import Systemfrom System import Arrayfrom System.Collections.Generic import *clr.AddReference(&#x27;ProtoGeometry&#x27;)from Autodesk.DesignScript.Geometry import *clr.AddReference(&quot;RevitNodes&quot;)import Revitclr.ImportExtensions(Revit.Elements)clr.ImportExtensions(Revit.GeometryConversion)clr.AddReference(&quot;RevitServices&quot;)import RevitServicesfrom RevitServices.Persistence import DocumentManagerfrom RevitServices.Transactions import TransactionManagerclr.AddReference(&quot;RevitAPI&quot;)clr.AddReference(&quot;RevitAPIUI&quot;)import Autodeskfrom Autodesk.Revit.DB import *from Autodesk.Revit.UI import *doc = DocumentManager.Instance.CurrentDBDocumentuiapp = DocumentManager.Instance.CurrentUIApplicationapp = uiapp.Applicationuidoc = uiapp.ActiveUIDocumentTransactionManager.Instance.EnsureInTransaction(doc) # 事务开始####### 逻辑代码 ########TransactionManager.Instance.TransactionTaskDone() # 事务结束OUT = doc Python Script 样板文件Dynamo 2.0 开始,引入 Python 脚本模板。默认应用变量会自动添加到 Python Script 节点 复制文件RevitBoilerplate.py到位置位于 Dynamo 安装的 APPDATA 位置。 路径：%appdata%\\Dynamo\\Dynamo Revit\\{version}\\ 修改文件DynamoSettings.xml中的 PythonTemplateFilePath 内容 123&lt;PythonTemplateFilePath&gt; C:\\Users\\&#123;USERNAME&#125;\\AppData\\Roaming\\Dynamo\\Dynamo Revit\\&#123;version&#125;\\RevitBoilerplate.py&lt;/PythonTemplateFilePath&gt; 完成上面的设置之后。就可以使用 Dynamo 愉快编写 python 脚本操控 Revit 软件！","categories":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/categories/dynamo/"}],"tags":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/tags/dynamo/"},{"name":"python","slug":"python","permalink":"https://zedmoster.github.io/tags/python/"}]},{"title":"1.1 Dynamo's Python编辑器","slug":"PythonScriptPrimer/1.1 Dynamo's Python编辑器","date":"2021-02-08T11:49:51.000Z","updated":"2021-02-08T12:12:41.712Z","comments":true,"path":"2021/02/08/PythonScriptPrimer/1.1 Dynamo's Python编辑器/","link":"","permalink":"https://zedmoster.github.io/2021/02/08/PythonScriptPrimer/1.1%20Dynamo's%20Python%E7%BC%96%E8%BE%91%E5%99%A8/","excerpt":"Dynamo 的 Python 脚本编辑器Python 脚本节点随 Dynamo 一起安装，并且在许多方面，它与任何其他节点一样：可以放置在工作空间中，重命名并可以接受任意数量的输入。","text":"Dynamo 的 Python 脚本编辑器Python 脚本节点随 Dynamo 一起安装，并且在许多方面，它与任何其他节点一样：可以放置在工作空间中，重命名并可以接受任意数量的输入。 但是，与其他节点不同，如果右键单击并选择 Edit.. 则会出现一个脚本编辑窗口(双击节点)，如下所示： 在此窗口中，您可以编写 IronPython 脚本，这些脚本将作为 Dynamo 定义的一部分直接执行。要保存脚本，请单击 保存更改 按钮，然后保存其中的 Dynamo 定义。否则，请单击“取消”按钮以放弃所做的任何更改。 如何编写程序使用 Dynamo 编写 Python 代码！后面会学习设置样板代码，引用 Revit Api。 dynamo 手册","categories":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/categories/dynamo/"}],"tags":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/tags/dynamo/"},{"name":"python","slug":"python","permalink":"https://zedmoster.github.io/tags/python/"}]}],"categories":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/categories/dynamo/"}],"tags":[{"name":"dynamo","slug":"dynamo","permalink":"https://zedmoster.github.io/tags/dynamo/"},{"name":"python","slug":"python","permalink":"https://zedmoster.github.io/tags/python/"}]}